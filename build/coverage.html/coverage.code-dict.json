{"/home/travis/build/npmtest/node-npmtest-sitespeed.io/test.js":"/* istanbul instrument in package npmtest_sitespeed_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/lib.npmtest_sitespeed.io.js":"/* istanbul instrument in package npmtest_sitespeed_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sitespeed_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sitespeed_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sitespeed.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sitespeed_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sitespeed_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sitespeed_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sitespeed_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sitespeed_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sitespeed_io.__dirname + '/lib.npmtest_sitespeed_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/sitespeed.js":"'use strict';\n\nconst Promise = require('bluebird'),\n  moment = require('moment'),\n  log = require('intel'),\n  os = require('os'),\n  process = require('process'),\n  logging = require('./support/logging'),\n  toArray = require('./support/util').toArray,\n  difference = require('lodash.difference'),\n  merge = require('lodash.merge'),\n  pullAll = require('lodash.pullall'),\n  union = require('lodash.union'),\n  DataCollection = require('./support/dataCollection'),\n  browsertimeConfig = require('./plugins/browsertime').config,\n  webpagetestConfig = require('./plugins/webpagetest').config,\n  packageInfo = require('../package');\n\nconst QueueHandler = require('./support/queueHandler'),\n  StorageManager = require('./support/storageManager'),\n  loader = require('./support/pluginLoader'),\n  urlSource = require('./support/url-source');\n\nconst budgetResult = {\n  working: {},\n  failing: {}\n};\n\nfunction hasFunctionFilter(functionName) {\n  return ((obj) => (typeof obj[functionName] === 'function'));\n}\n\nfunction allInArray(sampleArray, referenceArray) {\n  return difference(sampleArray, referenceArray).length === 0;\n}\n\nfunction runOptionalFunction(objects, fN) {\n  // NOTE: note slicing due to https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n  let args = new Array(arguments.length - 2);\n  for (let i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  return Promise.resolve(objects)\n    .filter(hasFunctionFilter(fN))\n    .map((plugin) => Promise.resolve(plugin[fN].apply(plugin, args)));\n}\n\nmodule.exports = {\n  run(options) {\n    const url = options.urls[0];\n    const timestamp = moment();\n\n    if (options.utc) {\n      timestamp.utc();\n    }\n\n    const storageManager = new StorageManager(url, timestamp, options);\n    const dataCollection = new DataCollection();\n\n    return storageManager.createDataDir('logs').then((logDir) => {\n      logging.configure(options, logDir);\n    }).then(() => {\n      if (log.isEnabledFor(log.VERBOSE)) {\n        Promise.longStackTraces();\n      }\n      log.info('Versions OS: %s nodejs: %s sitespeed.io: %s browsertime: %s coach: %s', os.platform() + ' ' + os.release(), process.version, packageInfo.version, packageInfo.dependencies.browsertime, packageInfo.dependencies.webcoach);\n    }).then(() => {\n      return loader.parsePluginNames(options)\n    }).then((pluginNames) => {\n      const plugins = options.plugins;\n      if (plugins) {\n        pullAll(pluginNames, toArray(plugins.disable));\n        pluginNames = union(pluginNames, toArray(plugins.load));\n\n        if (plugins.list) {\n          log.info('The following plugins are enabled: %s', pluginNames.join(', '));\n        }\n      }\n      // if we run without cli, we still want the default options\n      // in options to use it in output\n      if (allInArray(['browsertime'], pluginNames)) {\n        options.browsertime = merge({}, browsertimeConfig, options.browsertime);\n      }\n      if (allInArray(['webpagetest'], pluginNames)) {\n        options.webpagetest = merge({}, webpagetestConfig, options.webpagetest);\n      }\n      if (allInArray(['browsertime', 'coach'], pluginNames)) {\n        options.browsertime = merge({}, options.browsertime, {\n          coach: true\n        });\n      }\n      if (allInArray(['browsertime', 'screenshot'], pluginNames)) {\n        options.browsertime = merge({}, options.browsertime, {\n          screenshot: true\n        });\n      }\n      return pluginNames;\n    })\n      .then((pluginNames) => {\n\n        return loader.loadPlugins(pluginNames)\n          .then((plugins) => {\n\n            let urlSources = [urlSource];\n\n            const allPlugins = urlSources.concat(plugins),\n              queueHandler = new QueueHandler(plugins, options);\n\n            return runOptionalFunction(allPlugins, 'open', {\n              storageManager,\n              dataCollection,\n              timestamp,\n              budget: budgetResult,\n              log\n            }, options)\n              .then(() => runOptionalFunction(allPlugins, 'postOpen', options))\n              .then(() => queueHandler.run(urlSources))\n              .tap((errors) => runOptionalFunction(allPlugins, 'close', options, errors))\n              .tap((errors) => runOptionalFunction(allPlugins, 'postClose', options, errors));\n          })\n      })\n      .then((errors) => {\n        log.info('Finished analysing %s', url);\n        if (options.summary && options.summary.out) {\n          console.log(options.summary.out); // eslint-disable-line no-console\n        }\n        return {\n          errors,\n          budgetResult\n        };\n      })\n      .catch((err) => {\n        log.error(err);\n        throw err;\n      })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/logging.js":"'use strict';\n\nlet log = require('intel');\n\nmodule.exports.configure = function configure(options, logDir) {\n  options = options || {};\n\n  let level = log.INFO;\n  switch (options.verbose) {\n    case 1:\n      level = log.DEBUG;\n      break;\n    case 2:\n      level = log.VERBOSE;\n      break;\n    case 3:\n      level = log.TRACE;\n      break;\n    default:\n      break;\n  }\n\n  if (options.silent) {\n    level = log.NONE;\n  }\n\n  log.basicConfig({\n    'format': '[%(date)s] %(message)s',\n    'level': level\n  });\n\n  log.addHandler(new log.handlers.File(logDir + '/sitespeed.io.log'));\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/util.js":"'use strict';\n\nconst format = require('util').format;\n\nmodule.exports = {\n  toArray(arrayLike) {\n    if (arrayLike === undefined || arrayLike === null) {\n      return [];\n    }\n    if (Array.isArray(arrayLike)) {\n      return arrayLike;\n    }\n    return [arrayLike];\n  },\n  throwIfMissing(options, keys, namespace) {\n    let missingKeys = keys.filter((key) => !options[key]);\n    if (missingKeys.length > 0) {\n      throw new Error(format('Required option(s) %s need to be specified in namespace \"%s\"',\n        missingKeys.map((s) => '\"' + s + '\"'), namespace));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/dataCollection.js":"'use strict';\nconst reduce = require('lodash.reduce'),\n  summaryBoxesSetup = require('./setup/summaryBoxes'),\n  detailedSetup = require('./setup/detailed');\n\nclass DataCollection {\n  constructor() {\n    this.summaryPages = {};\n    this.urlPages = {};\n    this.urlRunPages = {};\n  }\n\n  getSummaryBoxes() {\n    return summaryBoxesSetup(this.summaryPages['index']);\n  }\n\n  getDetailedBoxes() {\n    return detailedSetup(this.summaryPages['detailed']);\n  }\n\n  getValidPages() {\n    return reduce(this.urlPages, (validPages, urlInfo, url) => {\n      if (Object.keys(urlInfo.data).length > 0) {\n        validPages[url] = urlInfo;\n      }\n      return validPages;\n    }, {});\n  }\n\n  getErrorPages() {\n    return reduce(this.urlPages, (errors, urlInfo, url) => {\n      if (urlInfo.errors) {\n        errors[url] = urlInfo.errors;\n      }\n      return errors;\n    }, {});\n  }\n\n}\n\nmodule.exports = DataCollection;\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/setup/summaryBoxes.js":"'use strict';\n\nconst h = require('../helpers');\nconst chunk = require('lodash.chunk');\nconst get = require('lodash.get');\n\nfunction infoBox(stat, name, formatter, url) {\n  if (typeof stat === 'undefined') {\n    return undefined;\n  }\n\n  return _box(stat, name, 'info', formatter, url)\n}\n\nfunction scoreBox(stat, name, url) {\n  if (typeof stat === 'undefined') {\n    return undefined;\n  }\n\n  return _box(stat, name, h.scoreLabel(stat.median), h.noop, url)\n}\n\nfunction metricBox(stat, name, score, formatter, url) {\n  if (typeof stat === 'undefined') {\n    return undefined;\n  }\n\n  return _box(stat, name, h.scoreLabel(score.median), formatter, url)\n}\n\nfunction _box(stat, name, label, formatter, url) {\n  const median = formatter ? formatter(stat.median) : stat.median;\n  const p90 = formatter ? formatter(stat.p90) : stat.p90;\n\n  return {\n    name,\n    label,\n    median,\n    p90,\n    url\n  }\n}\n\nmodule.exports = function(data) {\n  if (!data) {\n    return [];\n  }\n\n  const boxes = [];\n  const coach = data.coach;\n  const pagexray = data.pagexray;\n  const browsertime = data.browsertime;\n  const webpagetest = data.webpagetest;\n\n  // coach\n  if (coach) {\n    const summary = coach.summary;\n\n    boxes.push(\n      scoreBox(summary.score, 'Overall score', 'overallScore'),\n      scoreBox(summary.performance.score, 'Performance score', 'performanceScore'),\n      scoreBox(summary.accessibility.score, 'Accessibility score', 'accessibilityScore'),\n      scoreBox(summary.bestpractice.score, 'Best Practice score', 'bestPracticeScore'),\n      scoreBox(summary.performance.fastRender, 'Fast Render advice', 'fastRender'),\n      scoreBox(summary.performance.avoidScalingImages, 'Avoid scaling images advice', 'avoidScalingImages'),\n      scoreBox(summary.performance.compressAssets, 'Compress assets advice', 'compressAssets'),\n      scoreBox(summary.performance.optimalCssSize, 'Optimal CSS size advice', 'optimalCssSize'));\n  }\n\n  if (pagexray && coach) {\n    const cSum = coach.summary;\n    const pxSum = pagexray.summary;\n\n    boxes.push(\n      metricBox(pxSum.transferSize, 'Total size (transfer)',\n        cSum.performance.pageSize, h.size.format, 'pageSize'),\n      metricBox(pxSum.contentTypes.image.transferSize, 'Image size (transfer)',\n        cSum.performance.imageSize, h.size.format, 'imageSize'),\n      metricBox(pxSum.contentTypes.javascript.transferSize, 'Javascript size (transfer)',\n        cSum.performance.javascriptSize, h.size.format, 'javascriptSize'),\n      metricBox(pxSum.contentTypes.css.transferSize, 'CSS size (transfer)', cSum.performance.cssSize, h.size.format, 'cssSize'));\n\n  }\n\n  // no matching rules\n  if (pagexray) {\n    const summary = pagexray.summary;\n\n    boxes.push(\n      infoBox(summary.requests, 'Total requests'),\n      infoBox(summary.contentTypes.image.requests, 'Image requests'),\n      infoBox(summary.contentTypes.css.requests, 'CSS requests'),\n      infoBox(summary.contentTypes.javascript.requests, 'Javascript requests'),\n      infoBox(summary.contentTypes.font.requests, 'Font requests'),\n      infoBox(summary.responseCodes['200'], '200 responses'),\n      infoBox(summary.responseCodes['301'], '301 responses'),\n      // TODO if we have more than ZERO it should be red\n      infoBox(summary.responseCodes['404'], '404 responses'),\n      infoBox(summary.domains, 'Domains per page'),\n      infoBox(summary.expireStats, 'Cache time', h.time.duration),\n      infoBox(summary.lastModifiedStats, 'Time since last modification', h.time.duration));\n\n    if (summary.firstParty) {\n      boxes.push(\n        infoBox(summary.firstParty.requests, '1st party requests'),\n        infoBox(summary.thirdParty.requests, '3rd party requests'),\n        infoBox(summary.firstParty.transferSize, '1st party size', h.size.format),\n        infoBox(summary.thirdParty.transferSize, '3rd party sizes', h.size.format));\n    }\n  }\n\n  if (browsertime) {\n    const summary = browsertime.summary;\n\n    boxes.push(\n      infoBox(summary.rumSpeedIndex, 'RUM Speed Index', h.noop, 'rumSpeedIndex'),\n      infoBox(summary.firstPaint, 'First Paint', h.time.ms, 'firstPaint'),\n      infoBox(summary.pageTimings.backEndTime, 'Backend Time', h.time.ms, 'backEndTime'),\n      infoBox(summary.pageTimings.frontEndTime, 'Frontend Time', h.time.ms, 'frontEndTime'),\n      infoBox(summary.pageTimings.fullyLoaded, 'Fully Loaded Time', h.time.ms, 'fullyLoaded'));\n\n    if (summary.visualMetrics) {\n      boxes.push(\n        infoBox(summary.visualMetrics.FirstVisualChange, 'First Visual Change', h.time.ms),\n        infoBox(summary.visualMetrics.SpeedIndex, 'Speed Index'),\n        infoBox(summary.visualMetrics.VisualComplete85, 'Visual Complete 85%', h.time.ms),\n        infoBox(summary.visualMetrics.LastVisualChange, 'Last Visual Change', h.time.ms));\n    }\n\n    if (summary.custom) {\n      for (var key of Object.keys(summary.custom)) {\n        boxes.push(infoBox(summary.custom[key], key));\n      }\n    }\n  }\n\n  if (webpagetest) {\n    const firstView = get(webpagetest, 'summary.timing.firstView');\n    if (firstView) {\n      boxes.push(\n        infoBox(firstView.render, 'WPT render (firstView)'),\n        infoBox(firstView.SpeedIndex, 'WPT SpeedIndex (firstView)', h.noop, 'SpeedIndex'),\n        infoBox(firstView.fullyLoaded, 'WPT Fully loaded (firstView)'));\n    }\n  }\n\n  return chunk(boxes.filter(Boolean), 3);\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/index.js":"'use strict';\n\nmodule.exports = {\n\tsize: require( './size' ),\n  cap: require('./cap'),\n\ttime: require( './time' ),\n\tplural: require( './plural' ),\n\tscoreLabel: require( './scoreLabel' ),\n\tlabel: require( './label' ),\n\tget: require( './get' ),\n\tshort: require( './short'),\n  shortAsset: require( './shortAsset'),\n\tnoop: require( './noop' )\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/size.js":"'use strict';\n\nconst KB = 1024, MB = 1024 * 1024;\n\nmodule.exports = {\n  asKb(bytes) {\n    if (!bytes || bytes < 0)\n      return 0;\n    return Number(bytes / KB).toFixed(1);\n  },\n  format(bytes) {\n    if (!bytes || bytes < 0)\n      return 'N/A';\n\n    if (bytes < KB) {\n      return Number(bytes) + ' B';\n    } else if (bytes < MB) {\n      return Number(bytes / KB).toFixed(1) + ' KB';\n    } else {\n      return Number(bytes / MB).toFixed(1) + ' MB';\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/cap.js":"'use strict';\n\nmodule.exports = function ( word ) {\n\treturn word.substr( 0, 1 ).toUpperCase() + word.substr( 1 );\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/time.js":"'use strict';\n\nconst plural = require('./plural');\n\nmodule.exports = {\n  duration(seconds) {\n    if (seconds === undefined) {\n      return '';\n    }\n\n    var secondsPerYear = 365 * 24 * 60 * 60,\n      secondsPerWeek = 60 * 60 * 24 * 7,\n      secondsPerDay = 60 * 60 * 24,\n      secondsPerHour = 60 * 60,\n      secondsPerMinute = 60,\n      sign = (seconds < 0) ? '-' : '';\n\n    if (seconds < 0) {\n      seconds = Math.abs(seconds);\n    }\n\n    if (seconds / secondsPerYear >= 1) {\n      return sign + plural(Math.round(seconds / secondsPerYear), ' year');\n    } else if (seconds / secondsPerWeek >= 1) {\n      return sign + plural(Math.round(seconds / secondsPerWeek), ' week');\n    } else if (seconds / secondsPerDay >= 1) {\n      return sign + plural(Math.round(seconds / secondsPerDay), ' day');\n    } else if (seconds / secondsPerHour >= 1) {\n      return sign + plural(Math.round(seconds / secondsPerHour), ' hour');\n    } else if (seconds / secondsPerMinute >= 1) {\n      return sign + plural(Math.round(seconds / secondsPerMinute), ' minute');\n    } else {\n      return sign + plural(seconds, ' second');\n    }\n  },\n  ms(ms) {\n    return ms + ' ms'; \n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/plural.js":"'use strict';\n\nmodule.exports = function ( number, text ) {\n\tif ( number === 0 || number > 1 ) {\n    text += 's';\n\t}\n\treturn '' + number + ' ' + text;\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/scoreLabel.js":"'use strict';\n\nmodule.exports = function(value) {\n  value = value || 0;\n  if (value > 90) {\n    return 'ok';\n  }\n  else if (value > 80) {\n    return 'warning';\n  }\n  return 'error';\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/label.js":"'use strict';\n\nmodule.exports = function(value, ok, warning) {\n  value = value || 0;\n  if (value > ok) {\n    return 'ok';\n  }\n  else if (value > warning) {\n    return 'warning';\n  }\n  return 'error';\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/get.js":"'use strict';\nconst get = require('lodash.get');\n\nmodule.exports = function(object, property, defaultValue) {\n  if (arguments.length < 3) {\n    defaultValue = 0;\n  }\n  if (!object) {\n    return defaultValue;\n  }\n  return get(object, property, defaultValue)\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/short.js":"'use strict';\n\nmodule.exports = function ( text, number ) {\n\tif ( text.length > number ) {\n\t\treturn text.slice(0,number) + '...';\n\t}\n\treturn text;\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/shortAsset.js":"'use strict';\n\nmodule.exports = function(url) {\n  if (url.length > 40) {\n    let shortUrl = url.replace(/\\?.*/, '');\n    url = (shortUrl.substr(0, 20) + '...' + shortUrl.substr(-17));\n  }\n  return url;\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/helpers/noop.js":"'use strict';\n\nmodule.exports = function(value) {\n  return value;\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/setup/detailed.js":"'use strict';\n\nconst h = require('../helpers');\nconst get = require('lodash.get');\n\nfunction row(stat, name, metricName, formatter) {\n  if (typeof stat === 'undefined') {\n    return undefined;\n  }\n\n  return {\n    name,\n    metricName,\n    node: stat,\n    h: formatter ? formatter : h.noop\n  }\n}\n\nmodule.exports = function(data) {\n  if (!data) {\n    return [];\n  }\n\n  const rows = [];\n\n  const coach = data.coach;\n  const pagexray = data.pagexray;\n  const browsertime = data.browsertime;\n  const webpagetest = data.webpagetest;\n\n  if (coach) {\n    const summary = coach.summary;\n\n    rows.push(\n      row(summary.score, 'Coach score', 'overallScore'),\n      row(summary.performance.score, 'Coach performance score', 'performanceScore'),\n      row(summary.accessibility.score, 'Accessibility score', 'accessibilityScore'),\n      row(summary.bestpractice.score, 'Best Practice score', 'bestPracticeScore')\n    );\n  }\n\n  if (pagexray) {\n    const summary = pagexray.summary;\n    const contentTypes = summary.contentTypes;\n\n    rows.push(\n      row(contentTypes.image.requests, 'Image requests', 'imageRequestsPerPage'),\n      row(contentTypes.css.requests, 'CSS requests', 'cssRequestsPerPage'),\n      row(contentTypes.javascript.requests, 'Javascript requests', 'jsRequestsPerPage' ),\n      row(contentTypes.font.requests, 'Font requests', 'fontRequestsPerPage'),\n      row(summary.requests, 'Total requests', 'totalRequestsPerPage')\n    );\n\n    rows.push(\n      row(contentTypes.image.transferSize, 'Image size', 'imageSizePerPage', h.size.format),\n      row(contentTypes.html.transferSize, 'HTML size','htmlSizePerPage', h.size.format),\n      row(contentTypes.css.transferSize, 'CSS size','cssSizePerPage', h.size.format),\n      row(contentTypes.javascript.transferSize, 'Javascript size', 'jsSizePerPage',  h.size.format),\n      row(contentTypes.font.transferSize, 'Font size', 'fontSizePerPage', h.size.format),\n      row(summary.transferSize, 'Total size', 'totalSizePerPage', h.size.format));\n\n    const responseCodes = Object.keys(summary.responseCodes);\n    for (let code of responseCodes) {\n      rows.push(row(summary.responseCodes[code], code + ' responses'))\n    }\n  }\n\n  if (browsertime) {\n    const summary = browsertime.summary;\n\n    rows.push(\n      row(summary.rumSpeedIndex, 'RUMSpeed Index', 'rumSpeedIndex'),\n      row(summary.firstPaint, 'First Paint', 'firstPaint'),\n      row(summary.fullyLoaded, 'Fully loaded', 'fullyLoaded'));\n\n    const timings = Object.keys(summary.pageTimings);\n    for (let timing of timings) {\n      rows.push(row(summary.pageTimings[timing], timing, timing))\n    }\n\n    if (summary.custom) {\n      for (var key of Object.keys(summary.custom)) {\n        rows.push(row(summary.custom[key],key));\n      }\n    }\n\n    if (summary.visualMetrics) {\n      rows.push(\n        row(summary.visualMetrics.FirstVisualChange, 'First Visual Change', 'FirstVisualChange', h.time.ms),\n        row(summary.visualMetrics.SpeedIndex, 'Speed Index', 'SpeedIndex'),\n        row(summary.visualMetrics.PerceptualSpeedIndex, 'Perceptual Speed Index', 'PerceptualSpeedIndex'),\n        row(summary.visualMetrics.VisualComplete85, 'Visual Complete 85%', 'VisualComplete85', h.time.ms),\n        row(summary.visualMetrics.LastVisualChange, 'Last Visual Change', 'LastVisualChange', h.time.ms));\n    }\n  }\n\n  if (webpagetest) {\n    const firstView = get(webpagetest, 'summary.timing.firstView');\n    if (firstView) {\n      rows.push(\n        row(firstView.render, 'WPT render (firstView)', 'render'),\n        row(firstView.SpeedIndex, 'WPT SpeedIndex (firstView)', 'SpeedIndex'),\n        row(firstView.fullyLoaded, 'WPT Fully loaded (firstView)', 'fullyLoaded'));\n    }\n  }\n\n  return rows.filter(Boolean);\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/browsertime/index.js":"'use strict';\n\nconst browsertime = require('browsertime');\nconst Promise = require('bluebird');\nconst messageMaker = require('../../support/messageMaker');\nconst filterRegistry = require('../../support/filterRegistry');\nconst aggregator = require('./aggregator');\nconst api = require('webcoach');\nconst forEach = require('lodash.foreach');\nconst log = require('intel');\nconst merge = require('lodash.merge');\nconst BrowsertimeError = browsertime.errors.BrowsertimeError;\nconst analyzer = require('./analyzer');\nconst isEmpty = require('lodash.isempty');\n\nconst make = messageMaker('browsertime').make;\n\nconst visitedUrls = new Set();\n\nconst defaultConfig = {\n  browser: 'chrome',\n  iterations: 3,\n  connectivity: {\n    profile: 'native',\n    downstreamKbps: undefined,\n    upstreamKbps: undefined,\n    latency: undefined,\n    tsproxy: {\n      port: 1080\n    },\n    engine: 'tsproxy'\n  },\n  viewPort: '1366x708',\n  delay: 0\n}\n\nconst DEFAULT_METRICS_PAGE_SUMMARY = [\n  'statistics.timings.pageTimings',\n  'statistics.timings.rumSpeedIndex',\n  'statistics.timings.fullyLoaded',\n  'statistics.timings.firstPaint',\n  'statistics.timings.userTimings',\n  'statistics.visualMetrics.SpeedIndex',\n  'statistics.visualMetrics.FirstVisualChange',\n  'statistics.visualMetrics.VisualComplete85',\n  'statistics.visualMetrics.LastVisualChange',\n  'statistics.visualMetrics.PerceptualSpeedIndex',\n  'statistics.custom.*'\n];\n\nconst DEFAULT_METRICS_SUMMARY = [\n  'firstPaint',\n  'rumSpeedIndex',\n  'fullyLoaded',\n  'pageTimings',\n  'userTimings.marks',\n  'userTimings.measures',\n  'visualMetrics.SpeedIndex',\n  'visualMetrics.FirstVisualChange',\n  'visualMetrics.VisualComplete85',\n  'visualMetrics.LastVisualChange',\n  'visualMetrics.PerceptualSpeedIndex',\n  'custom.*'\n];\n\nmodule.exports = {\n  concurrency: 1,\n  open(context, options) {\n    this.options = merge({}, defaultConfig, options.browsertime);\n    this.options.mobile = options.mobile;\n    this.storageManager = context.storageManager;\n\n    browsertime.logging.configure(options);\n\n    // hack for disabling viewport on Android that's not supported\n    if (this.options.chrome && this.options.chrome.android && this.options.chrome.android.package) {\n      this.options.viewPort = undefined;\n    }\n\n    filterRegistry.registerFilterForType(DEFAULT_METRICS_PAGE_SUMMARY, 'browsertime.pageSummary');\n    filterRegistry.registerFilterForType(DEFAULT_METRICS_SUMMARY, 'browsertime.summary');\n  },\n  processMessage(message, queue) {\n    function processCoachOutput(url, group, results) {\n      return Promise.resolve(results.browserScripts)\n        .each((run, runIndex) => {\n          const coachAdvice = run.coach.coachAdvice;\n\n          // check if the coach has error(s)\n          if (!isEmpty(coachAdvice.errors)) {\n            log.error('%s generated the following errors in the coach %:2j', url, coachAdvice.errors);\n            queue.postMessage(make('error', 'The coach got the following errors: ' + JSON.stringify(coachAdvice.errors), {\n              url,\n              runIndex\n            }));\n          }\n\n          // if we miss the HAR from Firefox\n          if (results.har) {\n            // make sure to get the right run in the HAR\n            const myHar = api.pickAPage(results.har, runIndex);\n\n            return api.runHarAdvice(myHar)\n              .then((harResult) => api.merge(coachAdvice, harResult))\n              .then((total) => queue.postMessage(make('coach.run', total, {\n                url,\n                group,\n                runIndex\n              })));\n          } else {\n            return queue.postMessage(make('coach.run', coachAdvice, {\n              url,\n              group,\n              runIndex\n            }));\n          }\n        });\n    }\n\n    switch (message.type) {\n      case 'url':\n        {\n          const url = message.url;\n          const group = message.group;\n\n          visitedUrls.add(url);\n          // manually set the resultBaseDir\n          // it's used in BT when we record a video\n          return this.storageManager.createDirForUrl(message.url, 'data').then((dir) => {\n            this.options.resultDir = dir\n          }).then(() => analyzer.analyzeUrl(url, this.options))\n            .tap((results) => {\n              log.trace('Result from Browsertime for %s with %:2j', url, results);\n            })\n            .tap((results) => {\n\n              results.browserScripts.forEach((run, runIndex) => {\n                // take the HAR from this run and add it to the\n                // run data\n                // sometimes Firefox can't create the HAR + in the future\n                // we may wanna use Safari (without HAR)\n                if (results.har) {\n                  const runHar = api.pickAPage(results.har, runIndex);\n                  run.har = runHar;\n\n                  // if we have first and last visual change add it to the HAR file\n                  // so we can see it in the waterfall graph\n                  if (results.visualMetrics && results.visualMetrics[runIndex]) {\n                    run.har.log.pages[0].pageTimings._firstVisualChange = results.visualMetrics[runIndex].FirstVisualChange;\n                    results.har.log.pages[runIndex].pageTimings._firstVisualChange = results.visualMetrics[runIndex].FirstVisualChange;\n\n                    run.har.log.pages[0].pageTimings._lastVisualChange = results.visualMetrics[runIndex].LastVisualChange;\n                    results.har.log.pages[runIndex].pageTimings._lastVisualChange = results.visualMetrics[runIndex].LastVisualChange;\n\n                    run.har.log.pages[0].pageTimings._visualComplete85 = results.visualMetrics[runIndex].VisualComplete85;\n                    results.har.log.pages[runIndex].pageTimings._visualComplete85 = results.visualMetrics[runIndex].VisualComplete85;\n\n                  }\n                  // only add first paint if we don't have visual metrics\n                  else if (run.timings.firstPaint) {\n                    run.har.log.pages[0].pageTimings._firstPaint = run.timings.firstPaint;\n                    results.har.log.pages[runIndex].pageTimings._firstPaint = run.timings.firstPaint;\n                  }\n                }\n\n                // Kind of ugly way to add visualMetrics to a run\n                // it's outside of browserScripts today\n                // we could instead pass browsertime.visualMetrics maybe\n                if (results.visualMetrics) {\n                  run.visualMetrics = results.visualMetrics[runIndex];\n                }\n                queue.postMessage(make('browsertime.run', run, {\n                  url,\n                  group,\n                  runIndex\n                }));\n                aggregator.addToAggregate(run, group);\n              });\n              queue.postMessage(make('browsertime.pageSummary', results, {\n                url,\n                group\n              }));\n            })\n            .tap((results) => {\n              if (results.har) {\n                queue.postMessage(make('browsertime.har', results.har, {\n                  url,\n                  group\n                }));\n              }\n            })\n            .tap((results) => {\n              if (results.extraJson) {\n                forEach(results.extraJson, (value, key) => {\n                  if (key.indexOf('trace' > -1)) {\n                    queue.postMessage(make('browsertime.chrometrace', value, {\n                      url,\n                      group,\n                      name: key\n                    }));\n                  }\n              })\n              }\n            })\n            .tap((results) => {\n              if (results.screenshots) {\n                queue.postMessage(make('browsertime.screenshot', results.screenshots, {\n                  url,\n                  group\n                }));\n              }\n            })\n            .tap((results) => {\n              if (this.options.coach) {\n                return processCoachOutput(url, group, results);\n              }\n            })\n            .catch(BrowsertimeError, (e) => {\n              log.error('%s generated the following error in Browsertime %s', url, e);\n              queue.postMessage(make('error', e.message, merge({url}, e.extra)));\n            });\n        }\n\n        case 'summarize':\n        {\n          const summary = aggregator.summarize();\n          if (summary) {\n            for (let group of Object.keys(summary.groups)) {\n              queue.postMessage(make('browsertime.summary', summary.groups[group], {group}));\n            }\n          }\n\n          break;\n        }\n    }\n  },\n  config: defaultConfig\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/messageMaker.js":"'use strict';\n\nconst moment = require('moment'),\n  merge = require('lodash.merge'),\n  makeUuid = require('uuid').v4;\n\nmodule.exports = function messageMaker(source) {\n  return {\n    make(type, data, extras) {\n      const timestamp = moment().format(),\n        uuid = makeUuid();\n\n      return merge({uuid, type, timestamp, source, data}, extras);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/filterRegistry.js":"'use strict';\n\nconst clone = require('lodash.clonedeep'),\n  metricsFilter = require('./metricsFilter');\n\nlet filterForType = {};\n\nmodule.exports = {\n  registerFilterForType(filter, type) {\n    filterForType[type] = filter;\n  },\n\n  getFilterForType(type) {\n    return filterForType[type];\n  },\n\n  addFilterForType(filter, type) {\n    const filters = filterForType[type];\n    if (filters.indexOf(filter) === -1) {\n      filterForType[type].push(filter);\n    }\n  },\n\n  getFilters() {\n    return filterForType;\n  },\n\n  getTypes() {\n    return Object.keys(filterForType);\n  },\n\n  removeFilter(type) {\n    filterForType[type] = undefined;\n  },\n\n  clearAll() {\n    filterForType = {};\n  },\n\n  filterMessage(message) {\n    const filterConfig = this.getFilterForType(message.type);\n\n    if (!filterConfig) {\n      return message;\n    }\n\n    const filteredMessage = clone(message);\n    filteredMessage.data = metricsFilter.filterMetrics(filteredMessage.data, filterConfig);\n    return filteredMessage;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/metricsFilter.js":"'use strict';\n\nconst toArray = require('./util').toArray,\n  isEmpty = require('lodash.isempty'),\n  get = require('lodash.get'),\n  set = require('lodash.set'),\n  merge = require('lodash.merge'),\n  reduce = require('lodash.reduce');\n\nfunction normalizePath(path) {\n  if (path.endsWith('.*'))\n    return path.slice(0, -2);\n\n  return path;\n}\n\nfunction mergePath(destination, source, path) {\n  const value = get(source, path);\n  if (value !== undefined) {\n    return set(destination, path, value);\n  } else {\n    return destination;\n  }\n}\n\nmodule.exports = {\n  /**\n   *\n   * @param {Object} json\n   * @param {Array|string} metricPaths\n   */\n  filterMetrics(json, metricPaths) {\n    metricPaths = toArray(metricPaths);\n    if (typeof json !== 'object')\n      return undefined;\n\n    return metricPaths.reduce((result, path) => {\n      path = normalizePath(path);\n\n      const firstWildcard = path.indexOf('*.');\n\n      if (firstWildcard === -1) {\n        mergePath(result, json, path);\n      } else if (firstWildcard === 0) {\n        const leafPath = path.substring(2);\n\n        reduce((json), (result, value, key) => {\n          if (typeof value === 'object') {\n            const leaf = this.filterMetrics(value, leafPath);\n\n            if (!isEmpty(leaf)) {\n              result[key] = leaf;\n            }\n          }\n          return result;\n        }, result);\n      } else {\n        let branchPath = path.substring(0, firstWildcard);\n        if (branchPath.endsWith('.'))\n          branchPath = branchPath.slice(0, -1);\n\n\n        let branch = get(json, branchPath);\n        const leafPath = path.substring(firstWildcard + 2);\n        const leafs = Object.keys(branch).reduce((result, key) => {\n          const leaf = this.filterMetrics(branch[key], leafPath);\n\n          if (!isEmpty(leaf)) {\n            result[key] = leaf;\n          }\n          return result;\n        }, {});\n\n        branch = get(result, branchPath, leafs);\n        branch = merge(branch, leafs);\n        if (!isEmpty(branch)) {\n          return set(result, branchPath, branch);\n        }\n      }\n\n      return result;\n    }, {});\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/browsertime/aggregator.js":"'use strict';\n\nconst forEach = require('lodash.foreach'),\n  statsHelpers = require('../../support/statsHelpers');\n\nconst timings = ['firstPaint', 'fullyLoaded', 'rumSpeedIndex'];\n\nmodule.exports = {\n  statsPerType: {},\n  groups: {},\n\n  addToAggregate(browsertimeRunData, group) {\n\n    if (this.groups[group] === undefined) {\n      this.groups[group] = {};\n    }\n\n    forEach(timings, (timing) => {\n      if (browsertimeRunData.timings[timing]) {\n        statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], timing, browsertimeRunData.timings[timing]);\n      }\n    })\n\n    forEach(browsertimeRunData.timings.navigationTiming, (value, name) => {\n      statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['navigationTiming', name], value);\n    });\n\n    // pick up one level of custom metrics\n    forEach(browsertimeRunData.custom, (value, name) => {\n      statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['custom', name], value);\n    });\n\n    forEach(browsertimeRunData.timings.pageTimings, (value, name) => {\n      statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['pageTimings', name], value);\n    });\n\n    forEach(browsertimeRunData.timings.userTimings.marks, (timing) => {\n      statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['userTimings', 'marks', timing.name], timing.startTime);\n    });\n\n    forEach(browsertimeRunData.timings.userTimings.measures, (timing) => {\n      statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['userTimings', 'measures', timing.name], timing.duration);\n    });\n\n    forEach(browsertimeRunData.visualMetrics, (value, name) => {\n      if (name !== 'VisualProgress') {\n        statsHelpers.pushGroupStats(this.statsPerType, this.groups[group], ['visualMetrics', name], value);\n      }\n    });\n\n  },\n  summarize() {\n    if (Object.keys(this.statsPerType).length === 0) {\n      return undefined;\n    }\n\n    const summary = {\n      groups: {\n        total: this.summarizePerObject(this.statsPerType)\n      }\n    };\n\n    for (let group of Object.keys(this.groups)) {\n      summary.groups[group] = this.summarizePerObject(this.groups[group]);\n    }\n    return summary;\n  },\n\n  summarizePerObject(obj) {\n    return Object.keys(obj).reduce((summary, name) => {\n      if (timings.indexOf(name) > -1) {\n        statsHelpers.setStatsSummary(summary, name, obj[name])\n      } else if ('userTimings'.indexOf(name) > -1) {\n        summary.userTimings = {};\n        const marksData = {},\n          measuresData = {};\n        forEach(obj.userTimings.marks, (stats, timingName) => {\n          statsHelpers.setStatsSummary(marksData, timingName, stats)\n        });\n        forEach(obj.userTimings.measures, (stats, timingName) => {\n          statsHelpers.setStatsSummary(measuresData, timingName, stats)\n        });\n        summary.userTimings.marks = marksData;\n        summary.userTimings.measures = measuresData;\n      } else {\n        const categoryData = {};\n        forEach(obj[name], (stats, timingName) => {\n          statsHelpers.setStatsSummary(categoryData, timingName, stats)\n        });\n        summary[name] = categoryData;\n      }\n\n      return summary;\n    }, {});\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/statsHelpers.js":"'use strict';\n\nconst Stats = require('fast-stats').Stats,\n  get = require('lodash.get'),\n  set = require('lodash.set');\n\nfunction percentileName(percentile) {\n  if (percentile === 0) {\n    return 'min';\n  } else if (percentile === 100) {\n    return 'max';\n  } else {\n    return 'p' + String(percentile).replace('.', '_');\n  }\n}\n\nmodule.exports = {\n\n  /**\n   * Create or update a fast-stats#Stats object in target at path.\n   */\n  pushStats(target, path, data) {\n    if (typeof data !== 'number')\n      throw new Error('Tried to add ' + data + ' to stats');\n\n    const stats = get(target, path, new Stats());\n    stats.push(data);\n    set(target, path, stats);\n  },\n\n  pushGroupStats(target, domainTarget, path, data) {\n    this.pushStats(target, path, data);\n    this.pushStats(domainTarget, path, data);\n  },\n\n  /**\n   * Summarize stats and put result in target at path\n   */\n  setStatsSummary(target, path, stats) {\n    set(target, path, this.summarizeStats(stats));\n  },\n\n  summarizeStats(stats, options) {\n    if (stats.length === 0) {\n      return undefined;\n    }\n\n    options = options || {};\n    let percentiles = options.percentiles || [0, 90, 100];\n    let decimals = options.decimals || 0;\n    let data = {\n      median: stats.median().toFixed(decimals),\n      mean: stats.amean().toFixed(decimals)\n    };\n    percentiles.forEach((p) => {\n      let name = percentileName(p);\n      const percentile = stats.percentile(p);\n      if (Number.isFinite(percentile)) {\n        data[name] = percentile.toFixed(decimals);\n      } else {\n        throw new Error('Failed to calculate ' + name + ' for stats: ' + JSON.stringify(stats, null, 2));\n      }\n    });\n    if (options.includeSum) {\n      data.sum = stats.Σ().toFixed(decimals);\n    }\n\n    return data;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/browsertime/analyzer.js":"'use strict';\n\nlet merge = require('lodash.merge'),\n  path = require('path'),\n  Promise = require('bluebird'),\n  browsertime = require('browsertime'),\n  log = require('intel'),\n  coach = require('webcoach');\n\nconst browserScripts = browsertime.browserScripts;\n\nconst defaultBrowsertimeOptions = {\n  statistics: true\n};\n\nconst chromeIphoneEmulationOptions = {\n  mobileEmulation: {\n    deviceName: 'Apple iPhone 6'\n  }\n};\n\nconst iphone6UserAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_3 like Mac OS X) AppleWebKit/536.26 ' +\n  '(KHTML, like Gecko) Version/6.0 Mobile/10B329 Safari/8536.25';\n\nfunction parseUserScripts(scripts) {\n  if (!Array.isArray(scripts))\n    scripts = [scripts];\n\n  return Promise.reduce(scripts, (results, script) =>\n      browserScripts.findAndParseScripts(path.resolve(script), 'custom')\n        .then((scripts) => merge(results, scripts)),\n    {});\n}\n\nfunction addCoachScripts(scripts) {\n  return Promise.join(scripts, coach.getDomAdvice(),\n    (scripts, advice) => {\n      scripts.coach = {\n        coachAdvice: advice\n      };\n      return scripts;\n    });\n}\n\nmodule.exports = {\n  analyzeUrl(url, options) {\n    const btOptions = merge({}, defaultBrowsertimeOptions, options);\n    merge(btOptions, {verbose: options.verbose});\n\n    // set mobile options\n    if (options.mobile) {\n      btOptions.viewPort = '360x640';\n      if (btOptions.browser === 'chrome') {\n        btOptions.chrome = merge({}, btOptions.chrome, chromeIphoneEmulationOptions);\n      } else {\n        btOptions.userAgent = iphone6UserAgent;\n      }\n    }\n\n    const scriptCategories = browserScripts.allScriptCategories;\n    let scriptsByCategory = browserScripts.getScriptsForCategories(scriptCategories);\n\n    if (btOptions.script) {\n      const userScripts = parseUserScripts(btOptions.script);\n      scriptsByCategory = Promise.join(scriptsByCategory, userScripts,\n        (scriptsByCategory, userScripts) => merge(scriptsByCategory, userScripts));\n    }\n\n    if (btOptions.coach) {\n      scriptsByCategory = addCoachScripts(scriptsByCategory);\n    }\n\n    let engine = new browsertime.Engine(btOptions);\n    log.info('Starting %s for analysing %s %s time(s)', btOptions.browser, url, btOptions.iterations);\n    return engine.start()\n      .then(() => engine.run(url, scriptsByCategory))\n      .finally(() => engine.stop())\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/webpagetest/index.js":"'use strict';\n\nlet path = require('path'),\n  urlParser = require('url'),\n  messageMaker = require('../../support/messageMaker'),\n  filterRegistry = require('../../support/filterRegistry'),\n  analyzer = require('./analyzer'),\n  aggregator = require('./aggregator'),\n  forEach = require('lodash.foreach'),\n  merge = require('lodash.merge'),\n  get = require('lodash.get'),\n  log = require('intel'),\n  WebPageTest = require('webpagetest');\n\nconst make = messageMaker('webpagetest').make;\n\nconst hostRegex = /^(https?:\\/\\/)?([^\\/]*)/i;\nconst defaultWptHost = urlParser.parse(WebPageTest.defaultServer).host;\n\nconst DEFAULT_PAGE_SUMMARY_METRICS = [\n  'data.median.*.SpeedIndex',\n  'data.median.*.render',\n  'data.median.*.TTFB',\n  'data.median.*.fullyLoaded',\n  'data.median.*.userTimes.*',\n  // Use bytesIn to collect data for Opera Mini & UC Mini\n  'data.median.*.bytesIn',\n  'data.median.*.breakdown.*.requests',\n  'data.median.*.breakdown.*.bytes',\n  'data.median.*.requestsFull'\n];\n\nconst DEFAULT_SUMMARY_METRICS = [\n  'timing.*.SpeedIndex',\n  'timing.*.render',\n  'timing.*.TTFB',\n  'timing.*.fullyLoaded',\n  'asset.*.breakdown.*.requests',\n  'asset.*.breakdown.*.bytes',\n  'custom.*.custom.*'\n];\n\nfunction addCustomMetric(result) {\n  const customMetrics = get(result, 'data.median.firstView.custom');\n  if (customMetrics) {\n    for (const customMetric of customMetrics ) {\n      filterRegistry.addFilterForType('data.median.*.' + customMetric, 'webpagetest.pageSummary');\n    }\n  }\n}\n\nconst defaultConfig = {\n  host: 'https://www.webpagetest.org',\n  location: 'Dulles:Chrome',\n  connectivity: 'Cable',\n  runs: 3,\n  pollResults: 10,\n  timeout: 600,\n  includeRepeatView: false,\n  private: true,\n  aftRenderingTime: true,\n  video: true\n}\n\nmodule.exports = {\n  name() {\n    return path.basename(__dirname);\n  },\n  open(context, options) {\n    this.options = merge({}, defaultConfig, options.webpagetest);\n\n    if (!options.key) {\n      const host = hostRegex.exec(options.host);\n      if (host && host[2] === defaultWptHost) {\n        throw new Error('webpagetest.key needs to be specified when using the public WebPageTest server.');\n      }\n    }\n\n    filterRegistry.registerFilterForType(DEFAULT_PAGE_SUMMARY_METRICS , 'webpagetest.pageSummary');\n    filterRegistry.registerFilterForType(DEFAULT_SUMMARY_METRICS , 'webpagetest.summary');\n  },\n  processMessage(message, queue) {\n    switch (message.type) {\n      case 'url':\n\n      {\n        const url = message.url;\n        const group = message.group;\n        return analyzer.analyzeUrl(url, this.options)\n          .tap((result) => {\n            addCustomMetric(result);\n            if (result.trace) {\n                forEach(result.trace, (value, key) => {\n                    queue.postMessage(make('webpagetest.chrometrace', value, {url, group, name: key + '.json'}));\n                });\n            }\n\n            queue.postMessage(make('webpagetest.har', result.har, {url, group}));\n              forEach(result.data.runs, (run, runKey) =>\n                queue.postMessage(make('webpagetest.run', run, {\n                  url,\n                  group,\n                  runIndex: (parseInt(runKey) - 1)\n                }))\n              );\n              const location = result.data.location.replace(':', '-').replace(' ', '-').toLowerCase();\n              // There's no connectivity setup in the default config for WPT, make sure we catch that\n              const connectivity = get(result, 'data.connectivity', 'native').toLowerCase();\n              queue.postMessage(make('webpagetest.pageSummary', result, {\n                url,\n                group,\n                location,\n                connectivity\n              }));\n              aggregator.addToAggregate(group, result, connectivity, location);\n            })\n            .catch((err) => {\n              log.error('Error creating WebPageTest result ', err);\n              queue.postMessage(make('error', err, {\n                url\n              }));\n            })\n        }\n\n      case 'summarize':\n        {\n          let summary = aggregator.summarize();\n          if (summary && Object.keys(summary.groups).length > 0) {\n            for (let group of Object.keys(summary.groups)) {\n              queue.postMessage(make('webpagetest.summary', summary.groups[group], {\n                connectivity: aggregator.connectivity,\n                location: aggregator.location,\n                group\n              }));\n            }\n          }\n      }\n    }\n  },\n  config: defaultConfig\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/webpagetest/analyzer.js":"'use strict';\n\nvar fs = require('fs'),\n  Promise = require('bluebird'),\n  log = require('intel'),\n  clone = require('lodash.clonedeep'),\n  WebPageTest = require('webpagetest');\n\nPromise.promisifyAll(fs);\nPromise.promisifyAll(WebPageTest.prototype);\n\nmodule.exports = {\n  analyzeUrl(url, wptOptions) {\n\n    const wptClient = new WebPageTest(wptOptions.host, wptOptions.key);\n    wptOptions.firstViewOnly = !wptOptions.includeRepeatView;\n    let urlOrScript = url;\n\n    log.info('Sending url ' + url + ' to test on ' + wptOptions.host);\n    if (wptOptions.script) {\n      urlOrScript = wptOptions.script.split('{{{URL}}}').join(url);\n    }\n\n    // See https://github.com/sitespeedio/sitespeed.io/issues/1367\n    const options = clone(wptOptions);\n    return wptClient.runTestAsync(urlOrScript, options)\n      .then(function(data) {\n        var id = data.data.id;\n        log.info('Got ' + url + ' analysed from ' + options.host);\n        log.trace('Got JSON from WebPageTest :%:2j', data);\n\n        const promises = [];\n        promises.push(wptClient.getHARDataAsync(id, {}));\n        if (wptOptions.timeline) {\n          for (var i = 1; i < wptOptions.runs+1; i++) {\n            promises.push( wptClient.getChromeTraceDataAsync(id, {run:i}));\n          }\n        }\n        return Promise.all(promises).then((result) => {\n          const myResult = {\n             data: data.data,\n             har:result[0]\n          }\n          if (result.length > 1) {\n            const traces = {};\n            for (var i = 1; i < wptOptions.runs+1; i++) {\n              traces['trace-' + i] = result[i];\n            }\n            myResult.trace = traces;\n          }\n          return myResult;\n        });\n      });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/webpagetest/aggregator.js":"'use strict';\n\nconst forEach = require('lodash.foreach'),\n  statsHelpers = require('../../support/statsHelpers');\n\nconst metrics = ['TTFB', 'render', 'fullyLoaded', 'SpeedIndex'];\n\nmodule.exports = {\n  timingStats: {},\n  assetStats: {},\n  customStats: {},\n  assetGroups: {},\n  timingGroups: {},\n  customGroups: {},\n  connectivity: undefined,\n  location: undefined,\n  addToAggregate(group, wptData, connectivity, location) {\n    // TODO this will break if we run multiple locations/connectivity per run\n    this.location = location;\n    this.connectivity = connectivity;\n\n    if (this.assetGroups[group] === undefined) {\n      this.assetGroups[group] = {};\n      this.timingGroups[group] = {};\n      this.customGroups[group] = {};\n    }\n\n    forEach(wptData.data.runs, (run) => {\n      forEach(run, (viewData, viewName) => {\n        forEach(metrics, (metric) =>\n          statsHelpers.pushGroupStats(this.timingStats, this.timingGroups[group], [viewName, metric], viewData[metric]));\n\n        forEach(viewData.userTimes, (timingData, timingName) =>\n          statsHelpers.pushGroupStats(this.timingStats, this.timingGroups[group], [viewName, timingName], timingData));\n\n        forEach(viewData.breakdown, (contentType, typeName) =>\n          forEach(['requests', 'bytes'], (property) =>\n            statsHelpers.pushGroupStats(this.assetStats, this.assetGroups[group], [viewName, typeName, property], contentType[property])));\n\n        forEach(viewData.custom, (metricName) => {\n          if (!isNaN(viewData[metricName])) {\n         statsHelpers.pushGroupStats(\n              this.customStats,\n              this.customGroups[group],\n              [viewName, 'custom', metricName],\n              viewData[metricName])\n            }\n          });\n      });\n    });\n  },\n  summarize() {\n    const summary = {\n      groups: {\n        total: {\n          timing: this.summarizePerTimingType(this.timingStats),\n          asset: this.summarizePerAssetType(this.assetStats),\n          custom: this.summarizePerCustomType(this.customStats)\n        }\n      }\n    };\n\n    for (let group of Object.keys(this.timingGroups)) {\n      if (!summary.groups[group]) summary.groups[group] = {};\n      summary.groups[group].timing = this.summarizePerTimingType(this.timingGroups[group]);\n    }\n    for (let group of Object.keys(this.assetGroups)) {\n      if (!summary.groups[group]) summary.groups[group] = {};\n      summary.groups[group].asset = this.summarizePerAssetType(this.assetGroups[group]);\n    }\n    if (this.customGroups) {\n      for (let group of Object.keys(this.customGroups)) {\n        if (!summary.groups[group]) summary.groups[group] = {};\n        summary.groups[group].custom = this.summarizePerCustomType(this.customGroups[group]);\n      }\n    }\n    return summary;\n  },\n  summarizePerAssetType(type) {\n    const summary = {};\n    forEach(type, (view, viewName) =>\n      forEach(view, (contentType, contentTypeName) =>\n        forEach(contentType, (stats, propertyName) =>\n          statsHelpers.setStatsSummary(summary, [viewName, 'breakdown', contentTypeName, propertyName], stats))));\n    return summary;\n  },\n  summarizePerTimingType(type) {\n    const summary = {};\n    forEach(type, (view, viewName) =>\n      forEach(view, (stats, name) =>\n        statsHelpers.setStatsSummary(summary, [viewName, name], stats)));\n    return summary;\n  },\n  summarizePerCustomType(type) {\n    const summary = {};\n    forEach(type, (view, viewName) =>\n      forEach(view, (metricName, name) =>\n          forEach(metricName, (stats, propertyName) => {\n          statsHelpers.setStatsSummary(summary, [viewName, name, propertyName], stats)\n        }\n        )));\n    return summary;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/queueHandler.js":"'use strict';\n\n/* eslint no-console:0 */\n\nconst cq = require('concurrent-queue'),\n  Promise = require('bluebird'),\n  util = require('util'),\n  log = require('intel'),\n  messageMaker = require('../support/messageMaker'),\n  queueStats = require('../support/queueStatistics');\n\nconst make = messageMaker('queueHandler').make;\n\nfunction shortenData(key, value) {\n  if (key === 'data') {\n    return '{...}';\n  }\n  return value;\n}\n\nconst messageTypeDepths = {};\n\n/**\n * Check some message format best practices that applies to sitespeed.io.\n * Throws an error if message doesn't follow the rules.\n * @param message the message to check\n */\nfunction validateMessageFormat(message) {\n  function validateTypeStructure(message) {\n    const typeParts = message.type.split('.'),\n      baseType = typeParts[0],\n      typeDepth = typeParts.length;\n\n    if (typeDepth > 2)\n      throw new Error('Message type has too many dot separated sections: ' + message.type);\n\n    const previousDepth = messageTypeDepths[baseType];\n\n    if (previousDepth && previousDepth !== typeDepth) {\n      throw new Error(util.format('All messages of type %s must have the same structure. ' +\n        '%s has %d part(s), but earlier messages had %d part(s).',\n        baseType, message.type, typeDepth, previousDepth));\n    }\n\n    messageTypeDepths[baseType] = typeDepth;\n  }\n\n  function validateSummaryMessages(message) {\n    const type = message.type;\n    if (type.endsWith('.summary') && message.url) {\n      throw new Error(util.format('Summary message (%s) shouldn\\'t be url specific, use .pageSummary instead.', type));\n    }\n\n    if (type.endsWith('.pageSummary') && !message.url) {\n      throw new Error(util.format('Page summary message (%s) failed to specify a url', type));\n    }\n  }\n\n  validateTypeStructure(message);\n  validateSummaryMessages(message);\n}\n\nclass QueueHandler {\n  constructor(plugins, options) {\n    this.options = options;\n    this.errors = [];\n\n    this.createQueues(plugins);\n  }\n\n  createQueues(plugins) {\n    this.queues = plugins\n      .filter((plugin) => plugin.processMessage)\n      .map((plugin) => {\n        const concurrency = plugin.concurrency || Infinity;\n        const queue = cq()\n          .limit({concurrency});\n\n        queue.plugin = plugin;\n\n        const messageWaitingStart = {},\n          messageProcessingStart = {};\n\n        queue.enqueued((obj) => {\n          const message = obj.item;\n          messageWaitingStart[message.uuid] = process.hrtime();\n        });\n\n        queue.processingStarted((obj) => {\n          const message = obj.item;\n\n          const waitingDuration = process.hrtime(messageWaitingStart[message.uuid]),\n            waitingNanos = waitingDuration[0] * 1e9 + waitingDuration[1];\n\n          queueStats.registerQueueTime(message, queue.plugin, waitingNanos);\n\n          messageProcessingStart[message.uuid] = process.hrtime();\n        });\n\n\n        // FIXME handle rejections (i.e. failures while processing messages) properly\n        queue.processingEnded((obj) => {\n          const err = obj.err;\n          if (err) {\n            let rejectionMessage = 'Rejected ' + JSON.stringify(obj.item, shortenData, 2) +\n              ' for plugin: ' + plugin.name();\n\n            if (obj.item && obj.item.url)\n              rejectionMessage += ', url: ' + obj.item.url;\n\n            if (err.stack) {\n              log.error(err.stack);\n            }\n            this.errors.push(rejectionMessage + '\\n' + JSON.stringify(err));\n            return;\n          }\n\n          const message = obj.item;\n\n          const processingDuration = process.hrtime(messageWaitingStart[message.uuid]),\n            processingNanos = processingDuration[0] * 1e9 + processingDuration[1];\n\n          queueStats.registerProcessingTime(message, queue.plugin, processingNanos);\n        });\n\n        return {plugin, queue};\n      });\n  }\n\n  run(sources) {\n    return Promise.map(sources, (source) => source.findUrls(this))\n      .then(() => this.startProcessingQueues())\n      .then(() => this.drainAllQueues())\n      .then(() => this.postMessage(make('summarize')))\n      .then(() => this.drainAllQueues())\n      .then(() => {\n        if (this.options.queueStats) {\n          log.info(JSON.stringify(queueStats.generateStatistics(), null, 2));\n        }\n      })\n      .return(this.errors);\n  }\n\n  postMessage(message) {\n    validateMessageFormat(message);\n\n    // Don't return promise in loop - we don't want to wait for completion,\n    // just post the message.\n    for (let item of this.queues) {\n      item.queue(message);\n    }\n  }\n\n  startProcessingQueues() {\n    return Promise.each(this.queues, (item) => {\n      const queue = item.queue, plugin = item.plugin;\n      queue.process((message) => Promise.resolve(plugin.processMessage(message, this)));\n    });\n  }\n\n  drainAllQueues() {\n    const queues = this.queues;\n    return new Promise((resolve) => {\n      queues.forEach((item) => item.queue.drained(() => {\n        if (queues.every((item) => item.queue.isDrained)) {\n          resolve();\n        }\n      }));\n    });\n  }\n}\n\nmodule.exports = QueueHandler;\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/queueStatistics.js":"'use strict';\n\nconst stats = require('./statsHelpers'),\n  get = require('lodash.get'),\n  set = require('lodash.set');\n\nconst queueTimeByPluginName = {},\n  queueTimeByMessageType = {},\n  processingTimeByPluginName = {},\n  processingTimeByMessageType = {},\n  messageTypes = new Set(),\n  pluginNames = new Set();\n\nmodule.exports = {\n  registerQueueTime(message, plugin, nanos) {\n    messageTypes.add(message.type);\n    pluginNames.add(plugin.name());\n\n    stats.pushStats(queueTimeByMessageType, message.type, nanos / 1000000);\n    stats.pushStats(queueTimeByPluginName, plugin.name(), nanos / 1000000);\n  },\n\n  registerProcessingTime(message, plugin, nanos) {\n    messageTypes.add(message.type);\n    pluginNames.add(plugin.name());\n\n    stats.pushStats(processingTimeByMessageType, message.type, nanos / 1000000);\n    stats.pushStats(processingTimeByPluginName, plugin.name(), nanos / 1000000);\n  },\n\n  generateStatistics() {\n    const statOptions = {\n      percentiles: [0, 100],\n      includeSum: true\n    };\n\n    const byPluginName = Array.from(pluginNames).reduce((summary, pluginName) => {\n      set(summary, ['queueTime', pluginName],\n        stats.summarizeStats(get(queueTimeByPluginName, pluginName), statOptions));\n      set(summary, ['processingTime', pluginName],\n        stats.summarizeStats(get(processingTimeByPluginName, pluginName), statOptions));\n\n      return summary;\n    }, {});\n\n    const byMessageType = Array.from(messageTypes).reduce((summary, messageType) => {\n      set(summary, ['queueTime', messageType],\n        stats.summarizeStats(get(queueTimeByMessageType, messageType), statOptions));\n      set(summary, ['processingTime', messageType],\n        stats.summarizeStats(get(processingTimeByMessageType, messageType), statOptions));\n\n      return summary;\n    }, {});\n\n    return {\n      byPluginName,\n      byMessageType\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/storageManager.js":"'use strict';\n\nconst fs = require('fs-extra'),\n  Promise = require('bluebird'),\n  isEmpty = require('lodash.isempty'),\n  moment = require('moment'),\n  path = require('path'),\n  url = require('url'),\n  zlib = require('zlib'),\n  crypto = require('crypto'),\n  urlParser = require('url');\n\nPromise.promisifyAll(fs);\nPromise.promisifyAll(zlib);\n\nconst mkdirp = Promise.promisify(require('mkdirp'));\n\nfunction write(dirPath, filename, data, gzip) {\n  return Promise.join(dirPath, filename, data,\n    (dirPath, filename, data) => {\n      if (gzip) {\n        const buff = new Buffer(data, 'utf8');\n        return zlib.gzipAsync(buff, {\n          level: 1\n        }).then((buffer) =>\n          fs.writeFileAsync(path.join(dirPath, filename + '.gz'), buffer, 'utf8')\n        );\n      } else {\n        return fs.writeFileAsync(path.join(dirPath, filename), data, 'utf8');\n      }\n    }\n  );\n}\n\nfunction getDomainOrFileName(string) {\n  let domainOrFile = string;\n  if (domainOrFile.startsWith('http')) {\n    domainOrFile = url.parse(domainOrFile).hostname;\n  } else {\n    domainOrFile = path.basename(domainOrFile).replace(/\\./g, '_');\n  }\n  return domainOrFile;\n}\n\nclass StorageManager {\n  constructor(url, timestamp, options) {\n    timestamp = timestamp || moment();\n    options = options || {};\n\n    const domainOrFile = getDomainOrFileName(url);\n\n    this.timestamp = timestamp.format('YYYY-MM-DD-HH-mm-ss');\n    this.relativeBaseDir = options.outputFolder ? options.outputFolder : path.join('sitespeed-result', domainOrFile, this.timestamp);\n    this.baseDir =  path.resolve(process.cwd(), this.relativeBaseDir);\n\n  }\n\n  rootPathFromUrl(url) {\n    return this.pathFromRootToPageDir(url)\n      .split('/')\n      .filter(Boolean)\n      .map(() => '..')\n      .join('/')\n      .concat('/');\n  }\n\n  pathFromRootToPageDir(url) {\n    const parsedUrl = urlParser.parse(decodeURIComponent(url)),\n      pathSegments = parsedUrl.pathname.split('/').filter(Boolean);\n\n    pathSegments.unshift(parsedUrl.hostname);\n\n    pathSegments.unshift('pages');\n\n    if (!isEmpty(parsedUrl.search)) {\n      const md5 = crypto.createHash('md5'),\n        hash = md5.update(parsedUrl.search).digest('hex').substring(0, 8);\n      pathSegments.push('query-' + hash);\n    }\n\n    return pathSegments.join('/')\n      .concat('/');\n  }\n\n  createDataDir(subDir) {\n    const pathSegments = [\n      this.baseDir,\n      subDir\n    ].filter(Boolean);\n\n    return Promise.resolve(path.join.apply(null, pathSegments))\n      .tap((dirPath) => mkdirp(dirPath));\n  }\n\n  writeData(filename, data) {\n    return write(this.createDataDir('data'), filename, data);\n  }\n\n  writeHtml(filename, data) {\n    return write(this.createDataDir(), filename, data);\n  }\n\n  getBaseDir() {\n    return this.baseDir;\n  }\n\n  getRelativeBaseDir() {\n    return this.relativeBaseDir;\n  }\n\n  copyToResultDir(filename) {\n    return Promise.join(this.createDataDir(), filename,\n      (dirPath, filename) =>\n        fs.copyAsync(filename, dirPath));\n  }\n\n  createDirForUrl(url, subDir) {\n    const pathSegments = [\n      this.baseDir,\n      this.pathFromRootToPageDir(url),\n      subDir\n    ].filter(Boolean);\n\n    return Promise.resolve(path.join.apply(null, pathSegments))\n      .tap((dirPath) => mkdirp(dirPath));\n  }\n\n  writeDataForUrl(data, filename, url, subDir, gzip) {\n    const dirPath = ['data', subDir].filter(Boolean).join(path.sep);\n    return write(this.createDirForUrl(url, dirPath), filename, data, gzip);\n  }\n\n  writeHtmlForUrl(html, filename, url, gzip) {\n    return write(this.createDirForUrl(url), filename, html, gzip);\n  }\n}\n\nmodule.exports = StorageManager;\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/pluginLoader.js":"'use strict';\n\nconst Promise = require('bluebird'),\n  path = require('path'),\n  fs = require('fs');\n\nPromise.promisifyAll(fs);\n\nconst defaultPlugins = new Set(['browsertime', 'coach', 'datacollector', 'domains', 'assets', 'html', 'screenshot','metrics', 'text', 'harstorer', 'budget', 'tracestorer']);\n\nconst pluginsDir = path.join(__dirname, '..', 'plugins');\n\nmodule.exports = {\n  parsePluginNames(options) {\n    // if we don't use the cli, this will work out fine as long\n    // we configure only what we need\n    const possibleConfiguredPlugins = options.explicitOptions || options;\n    const isDefaultOrConfigured = (name) => (defaultPlugins.has(name) || typeof possibleConfiguredPlugins[name] === 'object');\n    const addMessageLoggerIfDebug = (pluginNames) => {\n      if (options.debug) {\n        // Need to make sure logger is first, so message logs appear\n        // before messages are handled by other plugins\n        pluginNames = ['messagelogger'].concat(pluginNames);\n      }\n      return pluginNames;\n    };\n\n    return fs.readdirAsync(pluginsDir)\n      .map((name) => path.basename(name, '.js'))\n      .then((builtins) => {\n        let plugins = builtins.filter(isDefaultOrConfigured);\n        return addMessageLoggerIfDebug(plugins);\n      });\n  },\n  loadPlugins(pluginNames) {\n   return Promise.resolve(pluginNames).map((name) => {\n     try {\n       const plugin = require(path.join(pluginsDir, name));\n       if (!plugin.name) {\n         plugin.name = () => name;\n       }\n       return plugin;\n     } catch (err) {\n       try {\n         return require(path.resolve(process.cwd(), name));\n      } catch(error) {\n        console.error('Couldn\\'t load plugin %s: %s', name, err); // eslint-disable-line no-console\n        // if it fails here, let it fail hard\n        throw error;\n      }\n     }\n   });\n }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/url-source.js":"'use strict';\n\nconst urlParser = require('url'),\n  messageMaker = require('../support/messageMaker');\n\nconst make = messageMaker('url-reader').make;\n\nmodule.exports = {\n  open(context, options) {\n    this.options = options;\n  },\n  findUrls(queue) {\n    for (const url of this.options.urls) {\n      queue.postMessage(make('url', {}, {url: url, group: urlParser.parse(url).hostname}));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/bin/sitespeed.js":"#!/usr/bin/env node\n\n/*eslint no-console: 0*/\n\n'use strict';\n\nconst cli = require('../lib/support/cli'),\n  sitespeed = require('../lib/sitespeed'),\n  Promise = require('bluebird');\n\nif (process.env.NODE_ENV !== 'production') {\n  require('longjohn');\n}\n\nPromise.config({\n  warnings: true,\n  longStackTraces: true\n});\n\nprocess.exitCode = 1;\n\nlet parsed = cli.parseCommandLine();\nlet budgetFailing = false;\n// hack for getting in the unchanged cli options\nparsed.options.explicitOptions = parsed.explicitOptions;\nparsed.options.urls = parsed.urls;\nparsed.options.urlsMetaData = parsed.urlsMetaData;\n\nreturn sitespeed.run(parsed.options)\n  .then((result) => {\n    if (result.errors.length > 0) {\n      throw new Error('Errors while running:\\n' + result.errors.join('\\n'));\n    }\n    if (parsed.options.budget && Object.keys(result.budgetResult.failing).length > 0) {\n      process.exitCode = 1;\n      budgetFailing = true;\n    }\n  })\n  .then(() => {\n    if (!budgetFailing) {\n      process.exitCode = 0;\n    }\n  })\n  .catch(() => {\n    process.exitCode = 1;\n  })\n  .finally(() => process.exit());\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/tools/check-licenses.js":"#!/usr/bin/env node\n/*eslint no-console: 0*/\n\n'use strict';\n\nconst checker = require('license-checker');\n\nconst INCOMPATIBLE_LICENCE_REGEX = /GPL/;\n\nchecker.init({\n  start: '.'\n}, function(json, err) {\n  if (err) {\n    console.error(err.message);\n    process.exit(1);\n  } else {\n    const incompatibleDependencies = Object.keys(json).filter((packageName) => {\n      let licenses = json[packageName].licenses;\n\n      if (!Array.isArray(licenses))\n        licenses = [licenses];\n\n      if (licenses.find((license) => license.match(INCOMPATIBLE_LICENCE_REGEX)))\n        return packageName;\n    });\n\n    if (incompatibleDependencies.length > 0) {\n      console.error('Found packages with incompatible license: ' + JSON.stringify(incompatibleDependencies));\n      process.exit(1);\n    } else {\n      console.log('All is well! No packages with an incompatible license found.');\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/tools/tcp-server.js":"#!/usr/bin/env node\n/*eslint no-console: 0*/\n\nvar net = require('net');\n\nvar server = net.createServer(function(sock) {\n  sock.on('data', function(data) {\n    console.log(data.toString());\n  });\n\n}).listen(process.argv[2] || 0, undefined, undefined, () => {\n  var address = server.address();\n  console.log('Server listening on ' + address.address +':'+ address.port);\n});\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/cli.js":"'use strict';\n\nlet yargs = require('yargs'),\n  path = require('path'),\n  packageInfo = require('../../package'),\n  merge = require('lodash.merge'),\n  reduce = require('lodash.reduce'),\n  cliUtil = require('./cliUtil'),\n  fs = require('fs'),\n  set = require('lodash.set'),\n  graphiteConfig = require('../plugins/graphite').config,\n  browsertimeConfig = require('../plugins/browsertime').config,\n  metricsConfig = require('../plugins/metrics').config,\n  webPageTestConfig = require('../plugins/webpagetest').config,\n  slackConfig = require('../plugins/slack').config;\n\nmodule.exports.parseCommandLine = function parseCommandLine() {\n  let parsed = yargs\n    .env('SITESPEED_IO')\n    .usage('$0 [options] <url>/<file>')\n    .require(1, 'urlOrFile')\n    .version(() => `${packageInfo.name} ${packageInfo.version}`)\n    .option('debug', {\n      default: false,\n      describe: 'Debug mode logs all internal messages to the console.',\n      type: 'boolean'\n    })\n    .option('verbose', {\n      alias: 'v',\n      describe: 'Verbose mode prints progress messages to the console. Enter up to three times (-vvv)' +\n        ' to increase the level of detail.',\n      type: 'count'\n    })\n    /*\n     Browsertime cli options\n     */\n    .option('browsertime.browser', {\n      alias: ['b', 'browser'],\n      default: browsertimeConfig.browser,\n      describe: 'Choose which Browser to use when you test.',\n      choices: ['chrome', 'firefox'],\n      group: 'Browser'\n    })\n    .option('browsertime.iterations', {\n      alias: 'n',\n      default: browsertimeConfig.iterations,\n      describe: 'How many times you want to test each page',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.profile', {\n      alias: ['c', 'connectivity'],\n      default: browsertimeConfig.connectivity.profile,\n      choices: ['3g', '3gfast', '3gslow', '3gem', '2g', 'cable', 'native', 'custom'],\n      describe: 'The connectivity profile.',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.downstreamKbps', {\n      default: browsertimeConfig.connectivity.downstreamKbps,\n      alias: ['downstreamKbps'],\n      describe: 'This option requires --connectivity be set to \"custom\".',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.upstreamKbps', {\n      default: browsertimeConfig.connectivity.upstreamKbps,\n      alias: ['upstreamKbps'],\n      describe: 'This option requires --connectivity be set to \"custom\".',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.latency', {\n      default: browsertimeConfig.connectivity.latency,\n      alias: ['latency'],\n      describe: 'This option requires --connectivity be set to \"custom\".',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.tsproxy.port', {\n      default: browsertimeConfig.connectivity.tsproxy.port,\n      describe: 'The port used for TSProxy',\n      group: 'Browser'\n    })\n    .option('browsertime.connectivity.engine', {\n      default: browsertimeConfig.connectivity.engine,\n      choices: ['tc', 'tsproxy', 'external'],\n      describe: 'The engine for connectivity. TSProxy needs Python 2.7. TC (Linux Traffic Control) needs tc work but will only setup upload and latency. Use external if you set the connectivity outside of Browsertime.',\n      group: 'Browser'\n    })\n    .option('browsertime.pageCompleteCheck', {\n      describe: 'Supply a Javascript that decides when the browser is finished loading the page and can start to collect metrics. The Javascript snippet is repeatedly queried to see if page has completed loading (indicated by the script returning true). Use it to fetch timings happening after the loadEventEnd.',\n      group: 'Browser'\n    })\n    .option('browsertime.script', {\n      describe: 'Add custom Javascript that collect metrics and run after the page has finished loading. Note that --script can be passed multiple times if you want to collect multiple metrics. The metrics will automatically be pushed to the summary/detailed summary and each individual page + sent to Graphite/InfluxDB.',\n      alias: ['script'],\n      group: 'Browser'\n    })\n    .option('browsertime.selenium.url', {\n      describe: 'Configure the path to the Selenium server when fetching timings using browsers. If not configured the supplied NodeJS/Selenium version is used.',\n      group: 'Browser'\n    })\n    .option('browsertime.viewPort', {\n      default: browsertimeConfig.viewPort,\n      describe: 'The browser view port size WidthxHeight like 400x300',\n      group: 'Browser'\n    })\n    .option('browsertime.userAgent', {\n      describe: 'The full User Agent string, defaults to the User Agent used by the browsertime.browser option.',\n      group: 'Browser'\n    })\n    .option('browsertime.preScript', {\n      alias: 'preScript',\n      describe: 'Selenium script(s) to run before you test your URL (use it for login, warm the cache, etc). Note that --preScript can be passed multiple times.',\n      group: 'Browser'\n    })\n    .option('browsertime.postScript', {\n      alias: 'postScript',\n      describe: 'Selenium script(s) to run after you test your URL (use it for logout etc). Note that --postScript can be passed multiple times.',\n      group: 'Browser'\n    })\n    .option('browsertime.delay', {\n      describe: 'Delay between runs, in milliseconds. Use it if your web server needs to rest between runs :)',\n      group: 'Browser'\n    })\n    .option('browsertime.speedIndex', {\n      alias: 'speedIndex',\n      type: 'boolean',\n      describe: 'Calculate SpeedIndex. Requires FFMpeg and python dependencies',\n      group: 'Browser'\n    })\n    .option('browsertime.video', {\n      alias: 'video',\n      type: 'boolean',\n      describe: 'Record a video. Requires FFMpeg to be installed',\n      group: 'Browser'\n    })\n    .option('browsertime.preURL', {\n      alias: 'preURL',\n      describe: 'A URL that will be accessed first by the browser before the URL that you wanna analyze. Use it to fill the cache.',\n      group: 'Browser'\n    })\n    .option('browsertime.userTimingWhitelist', {\n      alias: 'userTimingWhitelist',\n      describe: 'This option takes a regex that will whitelist which userTimings to capture in the results. All userTimings are captured by default. T',\n      group: 'Browser'\n    })\n    .option('browsertime.firefox.preference', {\n      describe: 'Extra command line arguments to pass Firefox preferences by the format key:value ' +\n      'To add multiple preferences, repeat --browsertime.firefox.preference once per argument.',\n       group: 'Browser'\n    })\n    .option('browsertime.firefox.includeResponseBodies', {\n      describe: 'Include response bodies in HAR when using Firefox.',\n      type: 'boolean',\n      group: 'Browser'\n    })\n    .option('browsertime.chrome.args', {\n      describe: 'Extra command line arguments to pass to the Chrome process (e.g. --no-sandbox). ' +\n      'To add multiple arguments to Chrome, repeat --browsertime.chrome.args once per argument.',\n      group: 'Browser'\n    })\n    .option('browsertime.chrome.dumpTraceCategoriesLog', {\n      type: 'boolean',\n      describe: 'Dump Chromes traceCategories log to disk.',\n      group: 'Browser'\n    })\n    .option('browsertime.chrome.traceCategories', {\n      describe: 'Set the trace categories.',\n      type: 'string',\n      group: 'Browser'\n    })\n  /*\n   Crawler options\n   */\n  .option('crawler.depth', {\n      alias: 'd',\n      describe: 'How deep to crawl (1=only one page, 2=include links from first page, etc.)',\n      group: 'Crawler'\n    })\n    .option('crawler.maxPages', {\n      alias: 'm',\n      describe: 'The max number of pages to test. Default is no limit.',\n      group: 'Crawler'\n    })\n    /**\n     Graphite cli option\n     */\n    .option('graphite.host', {\n      describe: 'The Graphite host used to store captured metrics.',\n      group: 'Graphite'\n    })\n    .option('graphite.port', {\n      default: graphiteConfig.port,\n      describe: 'The Graphite port used to store captured metrics.',\n      group: 'Graphite'\n    })\n    .option('graphite.auth', {\n        describe: 'The Graphite user and password used for authentication. Format: user:password',\n        group: 'Graphite'\n    })\n    .option('graphite.httpPort', {\n        describe: 'The Graphite port used to access the user interface and send annotations event',\n        default: 8080,\n        group: 'Graphite'\n    })\n    .option('graphite.namespace', {\n      default: graphiteConfig.namespace,\n      describe: 'The namespace key added to all captured metrics.',\n      group: 'Graphite'\n    })\n    .option('graphite.includeQueryParams', {\n      default: graphiteConfig.includeQueryParams,\n      describe: 'Whether to include query parameters from the URL in the Graphite keys or not',\n      type: 'boolean',\n      group: 'Graphite'\n    })\n    /** Plugins */\n    .option('plugins.list', {\n      describe: 'List all configured plugins in the log.',\n      type: 'boolean',\n      group: 'Plugins'\n    })\n    .option('plugins.disable', {\n      type: 'array',\n      describe: 'Disable a plugin. Use it to disable generating html or screenshots.',\n      group: 'Plugins'\n    })\n    .option('plugins.load', {\n      type: 'array',\n      describe: 'Extra plugins that you want to run. Relative or absolute path to the plugin.',\n      group: 'Plugins'\n    })\n    /** Budget */\n    .option('budget.configPath', {\n      describe: 'Path to the JSON budget file.',\n      group: 'Budget'\n    })\n    .option('budget.config', {\n      describe: 'The JSON budget config as a string.',\n      group: 'Budget'\n    })\n    .option('budget.output', {\n      choices: ['junit', 'tap'],\n      describe: 'The output format of the budget.',\n      group: 'Budget'\n    })\n\n    /**\n     InfluxDB cli option\n     */\n     /*\n    .option('influxdb.protocol', {\n      describe: 'The protocol used to store connect to the InfluxDB host.',\n      default: 'http',\n      group: 'InfluxDB'\n    })\n    .option('influxdb.host', {\n      describe: 'The InfluxDB host used to store captured metrics.',\n      group: 'InfluxDB'\n    })\n    .option('influxdb.port', {\n      default: 8086,\n      describe: 'The InfluxDB port used to store captured metrics.',\n      group: 'InfluxDB'\n    })\n    .option('influxdb.username', {\n      describe: 'The InfluxDB username for your InfluxDB instance.',\n      group: 'InfluxDB'\n    })\n    .option('influxdb.password', {\n      describe: 'The InfluxDB password for your InfluxDB instance.',\n      group: 'InfluxDB'\n    })\n    .option('influxdb.database', {\n      default: 'sitespeed',\n      describe: 'The database name used to store captured metrics.',\n      group: 'InfluxDB'\n    })\n    */\n\n  .option('metrics.list', {\n      describe: 'List all possible metrics in the data folder (metrics.txt).',\n      type: 'boolean',\n      default: metricsConfig.list,\n      group: 'Metrics'\n    })\n    .option('metrics.filterList', {\n      describe: 'List all configured filters for metrics in the data folder (configuredMetrics.txt)',\n      type: 'boolean',\n      default: metricsConfig.filterList,\n      group: 'Metrics'\n    })\n    .option('metrics.filter', {\n      type: 'array',\n      describe: 'Add/change/remove filters for metrics. If you want to send all metrics, use: *+ . If you want to remove all current metrics and send only the coach score: *- coach.summary.score.*',\n      group: 'Metrics'\n    })\n\n  /*\n   WebPageTest cli options\n   */\n  .option('webpagetest.host', {\n      default: webPageTestConfig.host,\n      describe: 'The domain of your WebPageTest instance.',\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.key', {\n      describe: 'The API key for you WebPageTest instance.',\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.location', {\n      describe: 'The location for the test',\n      default: webPageTestConfig.location,\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.connectivity', {\n      describe: 'The connectivity for the test.',\n      default: webPageTestConfig.connectivity,\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.runs', {\n      describe: 'The number of runs per URL.',\n      default: webPageTestConfig.runs,\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.custom', {\n      describe: 'Execute arbitrary Javascript at the end of a test to collect custom metrics.',\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.file', {\n      describe: 'Path to a script file',\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.script', {\n      describe: 'The WebPageTest script as a string.',\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.includeRepeatView', {\n      describe: 'Do repeat or single views',\n      type: 'boolean',\n      default: false,\n      group: 'WebPageTest'\n    })\n    .option('webpagetest.private', {\n      describe: 'Wanna keep the runs private or not',\n      type: 'boolean',\n      default: true,\n      group: 'WebPageTest'\n    })\n    /** Google Page Speed Insights */\n    .option('gpsi.key', {\n      describe: 'The key to use Google Page Speed Insight',\n      group: 'gpsi'\n    })\n    /**\n     Slack options\n     */\n    .option('slack.hookUrl', {\n      describe: 'WebHook url for the Slack team (check https://<your team>.slack.com/apps/manage/custom-integrations).',\n      group: 'Slack'\n    })\n    .option('slack.userName', {\n      describe: 'User name to use when posting status to Slack.',\n      default: slackConfig.userName,\n      group: 'Slack'\n    })\n    .option('slack.channel', {\n      describe: 'The slack channel without the # (if something else than the default channel for your hook).',\n      group: 'Slack'\n    })\n    .option('slack.type', {\n      describe: 'Send summary for a run, metrics from all URLs, only on errors or all to Slack.',\n      default: slackConfig.type,\n      choices: ['summary', 'url', 'error', 'all'],\n      group: 'Slack'\n    })\n    .option('slack.limitWarning', {\n      describe: 'The limit to get a warning in Slack using the limitMetric',\n      default: slackConfig.limitWarning,\n      group: 'Slack'\n    })\n    .option('slack.limitError', {\n      describe: 'The limit to get a error in Slack using the limitMetric',\n      default: slackConfig.limitError,\n      group: 'Slack'\n    })\n    .option('slack.limitMetric', {\n      describe: 'The metric that will be used to set warning/error',\n      default: slackConfig.limitMetric,\n      choices: ['coachScore', 'speedIndex', 'firstVisualChange'],\n      group: 'Slack'\n    })\n    /**\n    S3 options\n    */\n    .option('s3.key', {\n      describe: 'The S3 key',\n      group: 's3'\n    })\n    .option('s3.secret', {\n      describe: 'The S3 secret',\n      group: 's3'\n    })\n    .option('s3.bucketname', {\n      describe: 'The S3 bucketname',\n      group: 's3'\n    })\n    .option('s3.region', {\n      describe: 'The S3 region. Optional depending on your settings.',\n      group: 's3'\n    })\n    .option('s3.removeLocalResult', {\n      describe: 'Remove all the local result files after they have been uploaded to S3',\n      default: false,\n      type: 'boolean',\n      group: 's3'\n    })\n    /**\n     Html options\n     */\n    .option('html.showAllWaterfallSummary', {\n      describe: 'Set to true to show all waterfalls on page summary HTML report',\n      default: false,\n      type: 'boolean',\n      group: 'HTML'\n    })\n    .option('html.fetchHARFiles', {\n      describe: 'Set to true to load HAR files using fetch instead of including them in the HTML. Turn this on if serve your pages using a server.',\n      default: false,\n      type: 'boolean',\n      group: 'HTML'\n    })\n    .option('summary', {\n      describe: 'Show brief text summary to stdout',\n      default: false,\n      type: 'boolean',\n      group: 'text'\n    })\n    .option('summary-detail', {\n      describe: 'Show longer text summary to stdout',\n      default: false,\n      type: 'boolean',\n      group: 'text'\n    })\n    .option('mobile', {\n      describe: 'Access pages as mobile a fake mobile device. Set UA and width/height. For Chrome it will use device Apple iPhone 6.',\n      default: false,\n      type: 'boolean'\n    })\n    .option('resultBaseURL', {\n      describe: 'The base URL to the server serving the HTML result. In the format of https://result.sitespeed.io'\n    })\n    .option('gzipHAR', {\n      describe: 'Compress the HAR files with GZIP.',\n      default: false,\n      type: 'boolean'\n    })\n    .option('outputFolder', {\n      describe: 'The folder where the result will be stored.'\n    })\n    .option('firstParty', {\n      describe: 'A regex running against each request and categorize it as first vs third party URL. (ex: \".*sitespeed.*\")'\n    })\n    .option('utc', {\n      describe: 'Use Coordinated Universal Time for timestamps',\n      default: false,\n      type: 'boolean'\n    })\n    .help('h')\n    .alias('help', 'h')\n    .config('config')\n    .alias('version', 'V')\n    .coerce('budget', function(arg) {\n      if (typeof arg === 'object' && !Array.isArray(arg)) {\n        if (arg.configPath) {\n          arg.config = JSON.parse(fs.readFileSync(arg.configPath, 'utf8'));\n        } else if (arg.config){\n          arg.config = JSON.parse(arg.config);\n        }\n        return arg;\n      } else {\n        throw new Error('[ERROR] Something looks wrong with your budget configuration. Since sitespeed.io 4.4 you should pass the path to your budget file through the --budget.configPath flag instead of directly through the --budget flag.');\n      }\n    })\n    .coerce('webpagetest', function(arg) {\n      // for backwards compatible reasons we check if the passed parameters is a path to a script, if so just us it (PR #1445)\n      if (arg.script && fs.existsSync(arg.script)) {\n        arg.script = fs.readFileSync(path.resolve(arg.script), 'utf8');\n        /* eslint no-console: off */\n        console.log('[WARNING] Since sitespeed.io 4.4 you should pass the path to the script file through the --webpagetest.file flag (https://github.com/sitespeedio/sitespeed.io/pull/1445).');\n        return arg;\n      }\n\n      if (arg.file) {\n        arg.script = fs.readFileSync(path.resolve(arg.file), 'utf8');\n      } else if (arg.script) {\n        // because the escaped characters are passed re-escaped from the console\n        arg.script = arg.script.split('\\\\t').join('\\t');\n        arg.script = arg.script.split('\\\\n').join('\\n');\n      }\n      return arg;\n    })\n    //     .describe('browser', 'Specify browser')\n    .wrap(yargs.terminalWidth())\n    //  .check(validateInput)\n    .epilog('Read the docs at https://www.sitespeed.io/documentation/sitespeed.io/');\n\n  const aliases = parsed.getOptions().alias,\n    argv = parsed.argv;\n\n  // aliases are long options -> short option\n  const aliasLookup = reduce(aliases, (lookup, value, key) => {\n    lookup.set(value[0], key);\n    return lookup;\n  }, new Map());\n\n  let explicitOptions = yargs.reset().argv;\n\n  explicitOptions = reduce(explicitOptions, (result, value, key) => {\n    if (aliasLookup.has(key)) {\n      const fullKey = aliasLookup.get(key);\n      result = set(result, fullKey, value);\n    }\n    result = set(result, key, value);\n    return result;\n  }, {});\n\n  if (argv.config) {\n    const config = require(path.resolve(process.cwd(), argv.config));\n    explicitOptions = merge(explicitOptions, config);\n  }\n\n  if (argv.webpagetest.custom) {\n    argv.webpagetest.custom = fs.readFileSync(path.resolve(argv.webpagetest.custom), {\n      encoding: 'utf8'\n    });\n  }\n\n  if (argv.summaryDetail) argv.summary = true;\n\n  return {\n    urls: cliUtil.getURLs(argv._),\n    urlsMetaData: cliUtil.getAliases(argv._),\n    options: argv,\n    explicitOptions: explicitOptions\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/cliUtil.js":"'use strict';\n\nconst fs = require('fs');\n\nmodule.exports = {\n  getURLs(urls) {\n    const allUrls = [];\n    urls = urls.map((url) => url.trim());\n\n    for (var url of urls) {\n      if (url.startsWith('http')) {\n        allUrls.push(url);\n      } else {\n        const filePath = url;\n        var lines = fs.readFileSync(filePath).toString().split('\\n');\n        for (let line of lines) {\n          if (line.trim().length > 0) {\n            let lineArray = line.split(\" \", 2);\n            let url = lineArray[0].trim();\n            if(url) {\n              allUrls.push(url);\n            }\n          }\n        }\n      }\n    }\n    return allUrls;\n  },\n   getAliases(urls) {\n    const urlMetaData = {};\n    urls = urls.map((url) => url.trim());\n\n    for (var url of urls) {\n      if (url.startsWith('http')) {\n        return {};\n      } else {\n        const filePath = url;\n        var lines = fs.readFileSync(filePath).toString().split('\\n');\n        for (let line of lines) {\n          if (line.trim().length > 0) {\n            let url, alias = null;\n            let lineArray = line.split(\" \", 2);\n            url = lineArray[0].trim();\n            if(lineArray[1]) {\n              alias = lineArray[1].trim();\n            }\n            if(url && alias) {\n                urlMetaData[url] = {'alias' : alias};\n            }\n          }\n        }\n      }\n    }\n    return urlMetaData;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/graphite/index.js":"'use strict';\n\nconst isEmpty = require('lodash.isempty');\nconst filterRegistry = require('../../support/filterRegistry');\nconst Sender = require('./sender');\nconst merge = require('lodash.merge');\nconst log = require('intel');\nconst sendAnnotations = require('./send-annotation');\nconst DataGenerator = require('./data-generator');\n\nconst defaultConfig = {\n  port: 2003,\n  namespace: 'sitespeed_io.default',\n  includeQueryParams: false\n};\n\nmodule.exports = {\n  open(context, options) {\n    const opts = merge({}, defaultConfig, options.graphite);\n    this.options = options;\n    this.sender = new Sender(opts.host, opts.port);\n    this.dataGenerator = new DataGenerator(opts.namespace, opts.includeQueryParams, options);\n    log.debug('Setting up Graphite %s:%s for namespace %s', opts.host, opts.port, opts.namespace);\n    this.timestamp = context.timestamp;\n    this.storageManager = context.storageManager;\n  },\n  processMessage(message) {\n    if (!(message.type.endsWith('.summary') || message.type.endsWith('.pageSummary')))\n      return;\n\n    // we only sends individual groups to Grahite, not the\n    // total of all groups (you can calculate that yourself)\n    if (message.group === 'total')  {\n      return;\n    }\n\n    message = filterRegistry.filterMessage(message);\n    if (isEmpty(message.data))\n      return;\n\n    // TODO Here we could add logic to either create a new timestamp or\n    // use the one that we have for that run. Now just use the one for the\n    // run\n    let data = this.dataGenerator.dataFromMessage(message, this.timestamp).join('\\n') + '\\n';\n\n    if (data.length > 0) {\n      const storageManager = this.storageManager;\n      const resultBaseURL = this.options.resultBaseURL;\n      return this.sender.send(data).then(() => {\n        // make sure we only send once per URL (and browsertime is the most important)\n        // and you need to configure a base URL where you get the HTML result\n        if (message.type === 'browsertime.pageSummary' && resultBaseURL) {\n          return sendAnnotations.send(this.options, message.group, message.url, storageManager.getRelativeBaseDir(), storageManager.pathFromRootToPageDir(message.url), this.timestamp);\n        } else return;\n      });\n    } else {\n      return Promise.reject(new Error('No data to send to graphite for message:\\n' +\n        JSON.stringify(message, null, 2)));\n    }\n  },\n  config: defaultConfig\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/graphite/sender.js":"'use strict';\n\nconst net = require('net'),\n  log = require('intel'),\n  Promise = require('bluebird');\n\nclass GraphiteSender {\n  constructor(host, port) {\n    this.host = host;\n    this.port = port;\n  }\n\n  send(data) {\n    log.info('Send data to Graphite %s:%s', this.host, this.port);\n    log.trace('Sending ' + data);\n    return new Promise((resolve, reject) => {\n      let socket = net.connect(this.port, this.host, () => {\n        socket.write(data);\n        socket.end();\n        resolve();\n      });\n      socket.on('error', reject);\n    });\n  }\n}\n\nmodule.exports = GraphiteSender;\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/graphite/send-annotation.js":"'use strict';\nconst http = require('http');\nconst https = require('https');\nconst log = require('intel');\nconst Promise = require('bluebird');\nconst graphiteUtil = require('./util');\n\nmodule.exports = {\n  send(options, group, url, baseDir, pagePath, time) {\n\n    // The tags make it possible for the dashboard to use the\n    // templates to choose which annotations that will be showed.\n    // That's why we need to send tags that matches the template\n    // variables in Grafana.\n    const connectivity = graphiteUtil.getConnectivity(options);\n    const browser = options.browser;\n    const namespace = options.graphite.namespace.split('.').join(',');\n    const urlAndGroup = graphiteUtil.getURLAndGroup(options, group, url, options.graphite.includeQueryParams).split('.').join(',');\n    const tags =  `${connectivity},${browser},${namespace},${urlAndGroup}`;\n    const message = `<a href='${options.resultBaseURL}/${baseDir}/${pagePath}' target='_blank'>Result ${options.browsertime.iterations} run(s)</a>`;\n    const timestamp = Math.round(time.valueOf() / 1000);\n    const postData =\n      `{\"what\": \"Sitespeed.io\", \"tags\": \"${tags}\", \"data\": \"${message}\", \"when\": ${timestamp}}`;\n    const postOptions = {\n      hostname: options.graphite.host,\n      port: options.graphite.httpPort || 8080,\n      path: '/events/',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(postData)\n      }\n    };\n\n    // If Graphite is behind auth, use it!\n    if (options.graphite.auth) {\n      postOptions.auth = options.graphite.auth;\n    }\n\n    return new Promise((resolve, reject) => {\n      log.trace('Send annotation to Graphite: %j', postData);\n      // not perfect but maybe work for us\n      const lib = options.graphite.httpPort === 443 ? https : http;\n      const req = lib.request(postOptions, (res) => {\n        if (res.statusCode !== 200) {\n          log.error('Got %s from Graphite when sending annotation', res.statusCode);\n          reject();\n        } else {\n        res.setEncoding('utf8');\n        log.info('Sent annotation to Graphite');\n        resolve();\n      }\n      });\n      req.on('error', (err) => {\n        log.error('Got error from Graphite when sending annotation', err);\n        reject(err)\n      });\n      req.write(postData);\n      req.end();\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/graphite/util.js":"'use strict';\n\nconst get = require('lodash.get');\nconst flatten = require('../../support/flattenMessage');\n\nmodule.exports = {\n  toSafeKey(key) {\n    return key.replace(/[.~ /+|,:?&%]|%7C/g, '_');\n  },\n  getConnectivity(options) {\n    // if we have a friendly name for your conectivity, use that!\n    let connectivity = get(options, 'browsertime.connectivity.alias');\n    if (connectivity) {\n      return this.toSafeKey(connectivity);\n    } else {\n      return options.connectivity;\n    }\n  },\n  getURLAndGroup(options, group, url, includeQueryParams) {\n    if(group && options.urlsMetaData && options.urlsMetaData[url] && options.urlsMetaData[url].alias) {\n      let alias = options.urlsMetaData[url].alias;\n       return this.toSafeKey(group) + \".\" + this.toSafeKey(alias);\n    } else {\n      return flatten.keypathFromUrl(url, includeQueryParams);\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/support/flattenMessage.js":"'use strict';\n\nconst urlParser = require('url');\n\nfunction joinNonEmpty(strings, delimeter) {\n  return strings.filter(Boolean).join(delimeter);\n}\n\nfunction toSafeKey(key) {\n  return key.replace(/[.~ /+|,:?&%]|%7C/g, '_');\n}\n\nmodule.exports = {\n  keypathFromUrl(url, includeQueryParams)\n  {\n    function flattenQueryParams(params) {\n      return Object.keys(params).reduce((result, key) =>\n          joinNonEmpty([result, key, params[key]], '_'),\n        '');\n    }\n\n    url = urlParser.parse(url, !!includeQueryParams);\n\n    let path = toSafeKey(url.pathname);\n\n    if (includeQueryParams) {\n      path = joinNonEmpty([path, toSafeKey(flattenQueryParams(url.query))], '_');\n    }\n\n    const keys = [\n      toSafeKey(url.hostname),\n      path\n    ];\n\n    return joinNonEmpty(keys, '.');\n  },\n\n  flattenMessageData(message) {\n    function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    function recursiveFlatten(target, keyPrefix, value, type) {\n      // super simple version to avoid flatten HAR and screenshot data\n      if (keyPrefix.match(/(screenshots\\.|har\\.)/)) {\n          return;\n      }\n\n      // Google is overloading User Timing marks\n      // See https://github.com/sitespeedio/browsertime/issues/257\n      if (keyPrefix.indexOf('userTimings.marks.goog_') > -1) {\n        return;\n      }\n\n      // Google is overloading User Timing marks = the same using WebPageTest\n      // See https://github.com/sitespeedio/browsertime/issues/257\n      if (keyPrefix.indexOf('userTimes.goog_') > -1) {\n         return;\n      }\n\n      const valueType = typeof value;\n\n      switch (valueType) {\n        case 'number':\n        {\n          target[keyPrefix] = value;\n        }\n          break;\n        case 'object':\n        {\n          if (value === null) {\n            break;\n          }\n\n          Object.keys(value).forEach((key) => {\n\n            // Hey are you coming to the future from 1980s? Please don't\n            // look at this code, it's a ugly hack to make sure we can send assets\n            // to Graphite and don't send them with array position, instead\n            // use the url to generate the key\n\n            if (type === 'pagexray.pageSummary' && keyPrefix === 'assets') {\n                recursiveFlatten(target, joinNonEmpty([keyPrefix, toSafeKey(value[key].url)], '.'), value[key], type);\n            }\n            else {\n              recursiveFlatten(target, joinNonEmpty([keyPrefix, toSafeKey(key)], '.'), value[key], type);\n            }\n          });\n        }\n          break;\n        case 'string':\n        {\n          if (isNumeric(value)) {\n            target[keyPrefix] = parseFloat(value);\n          }\n        }\n          break;\n        case 'boolean':\n        {\n          target[keyPrefix] = value ? 1 : 0;\n        }\n          break;\n        case 'undefined':\n        {\n          // take care of faulty values, add a log in the future\n        }\n          break;\n        default:\n          throw new Error('Unhandled value type ' + valueType + ' found when flattening data for prefix ' + keyPrefix);\n      }\n    }\n\n    let retVal = {};\n    recursiveFlatten(retVal, '', message.data, message.type);\n    return retVal;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/graphite/data-generator.js":"'use strict';\n\nconst flatten = require('../../support/flattenMessage'),\n  util = require('util'),\n  graphiteUtil = require('./util'),\n  reduce = require('lodash.reduce');\n\nfunction keyPathFromMessage(message, options, includeQueryParams) {\n  let typeParts = message.type.split('.');\n  typeParts.push(typeParts.shift());\n\n  // always have browser and connectivity in Browsertime and related tools\n  if (message.type.match(/(^pagexray|^coach|^browsertime|^largestassets|^slowestassets|^aggregateassets|^domains)/)) {\n\n    // if we have a friendly name for your conectivity, use that!\n    let connectivity = graphiteUtil.getConnectivity(options);\n\n    typeParts.splice(1, 0, connectivity);\n    typeParts.splice(1, 0, options.browser);\n  } else if (message.type.match(/(^webpagetest)/)) {\n    if (message.connectivity) {\n      typeParts.splice(2, 0, message.connectivity);\n    }\n    if (message.location) {\n      typeParts.splice(2, 0, message.location);\n    }\n  }\n  // if we get a URL type, add the URL\n  if (message.url) {\n    typeParts.splice(1, 0, graphiteUtil.getURLAndGroup(options, message.group, message.url, includeQueryParams));\n  } else if (message.group) {\n    // add the group of the summary message\n    typeParts.splice(1, 0, graphiteUtil.toSafeKey(message.group));\n  }\n\n  return typeParts.join('.');\n}\n\nclass GraphiteDataGenerator {\n  constructor(namespace, includeQueryParams, options) {\n    this.namespace = namespace;\n    this.includeQueryParams = !!includeQueryParams;\n    this.options = options;\n  }\n\n  dataFromMessage(message, time) {\n    const timestamp = Math.round(time.valueOf() / 1000);\n\n    const keypath = keyPathFromMessage(message, this.options, this.includeQueryParams);\n\n    return reduce(flatten.flattenMessageData(message), (entries, value, key) => {\n      const fullKey = util.format('%s.%s.%s', this.namespace, keypath, key);\n      entries.push(util.format('%s %s %s', fullKey, value, timestamp));\n      return entries;\n    }, []);\n  }\n}\n\nmodule.exports = GraphiteDataGenerator;\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/metrics/index.js":"'use strict';\n\nconst flatten = require('../../support/flattenMessage');\nconst merge = require('lodash.merge');\nconst filterRegistry = require('../../support/filterRegistry');\n\nconst defaultConfig = {\n  list: false,\n  filterList: false\n};\n\nmodule.exports = {\n  open(context, options) {\n    this.options = merge({}, defaultConfig, options.metrics);\n    this.metrics = {};\n    this.storageManager = context.storageManager;\n  },\n  postOpen() {\n    if (this.options.filter) {\n\n      const filters = Array.isArray(this.options.filter) ? this.options.filter : [this.options.filter];\n\n      for (let metric of filters) {\n        // for all filters\n        // cleaning all filters means (right now) that all\n        // metrics are sent\n        if (metric === '*+') {\n          filterRegistry.clearAll();\n        }\n        // all registred types will be set as unmatching,\n        // use it if you want to have a clean filter where\n        // all types are removed and then you can add your own\n        else if(metric === '*-') {\n          let types = filterRegistry.getTypes();\n          filterRegistry.clearAll();\n          for (let type of types) {\n            filterRegistry.registerFilterForType('-', type);\n          }\n        }\n        else {\n          let parts = metric.split('.');\n          // the type is \"always\" the first two\n          let type = parts.shift() + '.' + parts.shift();\n          let filter = parts.join('.');\n          let oldFilter = filterRegistry.getFilterForType(type);\n          if (oldFilter && typeof oldFilter === 'object') {\n            oldFilter.push(filter);\n          } else {\n            oldFilter = [filter];\n          }\n          filterRegistry.registerFilterForType(oldFilter, type);\n        }\n      }\n    }\n\n  },\n  processMessage(message) {\n    if (this.options.list) {\n      if (!(message.type.endsWith('.summary') || message.type.endsWith('.pageSummary')))\n        return;\n      let flattenMess = flatten.flattenMessageData(message);\n      for (let key of Object.keys(flattenMess)) {\n        this.metrics[message.type + '.' + key] = 1;\n      }\n    } else {\n      return\n    }\n  },\n  close() {\n    if (this.options.list) {\n      this.storageManager.writeData('metrics.txt', Object.keys(this.metrics).join('\\n'));\n    }\n\n    if (this.options.filterList) {\n      let output = '';\n      let filtersByType = filterRegistry.getFilters();\n      for (let type of Object.keys(filtersByType)) {\n        for (let filters of filtersByType[type]) {\n            output+= type + '.' + filters + '\\n';\n        }\n      }\n      return this.storageManager.writeData('configuredMetrics.txt', output);\n    }\n  },\n  config: defaultConfig\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/slack/index.js":"'use strict';\n\nconst throwIfMissing = require('../../support/util').throwIfMissing;\nconst Promise = require('bluebird');\nconst path = require('path');\nconst log = require('intel');\nconst Slack = require('node-slack');\nconst merge = require('lodash.merge');\nconst getAttachments = require('./attachements');\nconst getSummary = require('./summary');\n\nPromise.promisifyAll(Slack.prototype);\n\nconst defaultConfig = {\n  userName: 'Sitespeed.io',\n  type: 'all',\n  limitWarning: 90,\n  limitError: 80,\n  limitMetric: 'coachScore'\n};\n\nmodule.exports = {\n  name() {\n    return path.basename(__dirname);\n  },\n  open(context, options) {\n    throwIfMissing(options.slack, ['hookUrl', 'userName'], 'slack');\n    this.data = context.dataCollection;\n  },\n  close(options) {\n    const slackOptions = merge({}, defaultConfig, options.slack);\n    const slack = new Slack(slackOptions.hookUrl);\n    const type = slackOptions.type;\n    const pageErrors = [];\n    let logo = \"https://www.sitespeed.io/img/slack/sitespeed-logo-slack.png\";\n\n    let channel = slackOptions.channel;\n    if (channel && !channel.startsWith('#')) {\n      channel = `#${channel}`;\n    }\n\n    for (const url of Object.keys(this.data.urlPages)) {\n      if (this.data.urlPages[url].errors) {\n        pageErrors.push(this.data.urlPages[url].errors);\n      }\n    }\n\n    let text = '';\n\n    if (['summary', 'all', 'error'].includes(type)) {\n      const sum = getSummary(this.data, pageErrors, options);\n      text += sum.summaryText + '\\n' + sum.errorText;\n      logo = sum.logo;\n    }\n\n    let attachments = [];\n    if (['url', 'all', 'error'].includes(type)) {\n      attachments = getAttachments(this.data, slackOptions);\n    }\n\n    if (type === 'error' && pageErrors.length > 0 || type !== 'error') {\n      log.debug('Sending message to Slack channel %s and username %s', slackOptions.channel, slackOptions.userName);\n      return slack.sendAsync({\n        text,\n        icon_url: logo,\n        channel,\n        mrkdwn: true,\n        username: slackOptions.userName,\n        attachments\n      })\n    }\n  },\n  config: defaultConfig\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/slack/attachements.js":"'use strict';\n\nconst get = require('lodash.get');\nconst h = require('../../support/helpers');\n\nfunction getMetric(metric) {\n  if (metric.median) {\n    return metric.median + ' ms' + ' (' + metric.max + ')'\n  } else {\n    return metric;\n  }\n}\n\nmodule.exports = function(dataCollection, slackOptions) {\n  const attachments = [];\n\n  const resultsPerUrl = dataCollection.urlPages;\n\n  for (let url of Object.keys(resultsPerUrl)) {\n    const results = resultsPerUrl[url];\n    const base = results.data;\n    const metrics = {\n      firstPaint: {\n        name: 'First paint',\n        metric: get(base.browsertime, 'pageSummary.statistics.timings.firstPaint')\n      },\n      speedIndex: {\n        name: 'Speed Index',\n        metric: get(base.browsertime, 'pageSummary.statistics.visualMetrics.SpeedIndex')\n      },\n      firstVisualChange: {\n        name: 'First Visual Change',\n        metric: get(base.browsertime, 'pageSummary.statistics.visualMetrics.FirstVisualChange')\n      },\n      visualComplete85: {\n        name: 'Visual Complete 85%',\n        metric: get(base.browsertime, 'pageSummary.statistics.visualMetrics.VisualComplete85')\n      },\n      lastVisualChange: {\n        name: 'Last Visual Change',\n        metric: get(base.browsertime, 'pageSummary.statistics.visualMetrics.LastVisualChange')\n      },\n      fullyLoaded: {\n        name: 'Fully Loaded',\n        metric: get(base.browsertime, 'pageSummary.statistics.timings.fullyLoaded')\n      },\n      domContentLoadedTime: {\n        name: 'domContentLoadedTime',\n        metric: get(base.browsertime, 'pageSummary.statistics.timings.pageTimings.domContentLoadedTime')\n      },\n      rumSpeedIndex: {\n        name: 'RUM Speed Index',\n        metric: get(base.browsertime, 'pageSummary.statistics.timings.rumSpeedIndex')\n      },\n      coachScore: {\n        name: 'Coach score',\n        metric: get(base.coach, 'pageSummary.advice.performance.score')\n      },\n      transferSize: {\n        name: 'Page transfer size',\n        metric: h.size.format(get(base.pagexray, 'pageSummary.transferSize'))\n      },\n      transferRequests: {\n        name: 'Requests',\n        metric: get(base.pagexray, 'pageSummary.requests')\n      }\n    };\n\n    const fields = [];\n    for (const key of Object.keys(metrics)) {\n      const metric = metrics[key];\n      if (metric.metric !== undefined) {\n        fields.push({\n          title: metric.name,\n          value: getMetric(metric.metric),\n          short: true\n        })\n      }\n    }\n\n    // add all the errors\n    if (results.errors) {\n      for (const key of Object.keys(results.errors)) {\n        fields.push({\n          title: key + ' error',\n          value: results.errors[key],\n          short: false\n        })\n      }\n    }\n\n    let color = 'good';\n\n    const limitMetric = metrics[slackOptions.limitMetric];\n    if (limitMetric && slackOptions.limitMetric === 'coachScore') {\n      if (limitMetric.metric < slackOptions.limitError) {\n        color = 'danger';\n      } else if (limitMetric.metric < slackOptions.limitWarning) {\n        color = 'warning';\n      }\n    }\n    // SpeedIndex/firstVisualChange\n    else if (limitMetric) {\n      if (limitMetric.metric > slackOptions.limitError) {\n        color = 'danger';\n      } else if (limitMetric.metric > slackOptions.limitWarning) {\n        color = 'warning';\n      }\n    }\n\n    attachments.push({\n      color,\n      text: url,\n      fields\n    });\n  }\n  return attachments;\n};\n","/home/travis/build/npmtest/node-npmtest-sitespeed.io/node_modules/sitespeed.io/lib/plugins/slack/summary.js":"'use strict';\nconst util = require('util');\nconst get = require('lodash.get');\nconst h = require('../../support/helpers');\n\nmodule.exports = function(dataCollection, errors, options) {\n  const base = dataCollection.summaryPages.index || {};\n  const metrics = {\n    firstPaint: {\n      name: 'First paint',\n      metric: get(base.browsertime, 'summary.firstPaint.median')\n    },\n    domContentLoadedTime: {\n      name: 'domContentLoadedTime',\n      metric: get(base.browsertime, 'summary.pageTimings.domContentLoadedTime.median')\n    },\n    speedIndex: {\n      name: 'Speed Index',\n      metric: get(base.browsertime, 'summary.visualMetrics.SpeedIndex.median')\n    },\n    firstVisualChange: {\n      name: 'First Visual Change',\n      metric: get(base.browsertime, 'summary.visualMetrics.FirstVisualChange.median')\n    },\n    visualComplete85: {\n      name: 'Visual Complete 85%',\n      metric: get(base.browsertime, 'summary.visualMetrics.VisualComplete85.median')\n    },\n    lastVisualChange: {\n      name: 'Last Visual Change',\n      metric: get(base.browsertime, 'summary.visualMetrics.LastVisualChange.median')\n    },\n    fullyLoaded: {\n      name: 'Fully Loaded',\n      metric: get(base.browsertime, 'summary.fullyLoaded.median')\n    },\n    coachScore: {\n      name: 'Coach score',\n      metric: get(base.coach, 'summary.performance.score.median')\n    },\n    transferSize: {\n      name: 'Page transfer weight',\n      metric: h.size.format(get(base.pagexray, 'summary.transferSize.median'))\n    }\n  };\n\n  let summaryText = `${h.plural(Object.keys(dataCollection.urlPages).length, 'page')} analyzed for ${h.short(options.urls[0], 30)} ` +\n    `(${h.plural(options.browsertime.iterations, 'run')}, ` +\n    `${h.cap(options.browsertime.browser)}/${options.mobile ? 'mobile' : 'desktop'}/${options.connectivity})\\n`;\n\n  summaryText += '*Site summary*\\n';\n  for (const key of Object.keys(metrics)) {\n    if (metrics[key].metric !== undefined) {\n      summaryText += metrics[key].name + ': ' + metrics[key].metric + '\\n';\n    }\n  }\n\n  let logo = 'https://www.sitespeed.io/img/slack/sitespeed-logo-slack.png';\n  if (metrics.coachScore.median === 100) {\n    logo = 'https://www.sitespeed.io/img/slack/sitespeed-logo-slack-100';\n  }\n\n  let errorText = '';\n  if (errors.length > 0) {\n    errorText += util.format('%d error(s):\\n', errors.length);\n    logo = 'https://www.sitespeed.io/img/slack/sitespeed-logo-slack-hm.png';\n  }\n\n  return {\n    summaryText,\n    errorText,\n    logo\n  };\n};\n"}